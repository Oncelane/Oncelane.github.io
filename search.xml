<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>websocket-im库</title>
      <link href="/2024/08/18/websocketimku/"/>
      <url>/2024/08/18/websocketimku/</url>
      
        <content type="html"><![CDATA[<h1 id="websocket-im在go中的简单实现"><a href="#websocket-im在go中的简单实现" class="headerlink" title="websocket-im在go中的简单实现"></a>websocket-im在go中的简单实现</h1><p>由于 Go 语言支持协程（goroutines），实现长连接服务器变得非常简便。我们可以为每一个连接创建一个协程，用于处理数据的收发。</p><span id="more"></span><p>在网络库中，封装了底层连接的数据结构通常被称为 channel，但这与 Go 语言中的 chan 并不相同。</p><p><code>channel</code>的定义如下：</p><pre class="line-numbers language-golang" data-language="golang"><code class="language-golang">type Channel struct {Conn *websocket.Conn //底层的websocket连接Recv chan MsgTypeSend chan MsgType}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每当一个 WebSocket 连接建立时，我们会创建一个 Channel 结构体来管理这个连接的数据收发。并为每个连接启动两个协程：一个用于监听接收的消息，并将其放入 Recv 通道；另一个用于监听发送的消息，并将 Send 通道中的消息写入 Conn。</p><p>监听接收</p><pre class="line-numbers language-golang" data-language="golang"><code class="language-golang">func (c *Channel) recvHandler {for {MsgType = c.Conn.Read() // websocket的read是阻塞函数c.Recv &lt;- MsgType}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>监听发送</p><pre class="line-numbers language-golang" data-language="golang"><code class="language-golang">func (c *Channel) sendHandler {for MsgType := range c.Send {c.Conn.Write(MsgType); // write也是阻塞函数}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只要websocket连接不断开，这两个协程一直处于工作状态</p><p>这种设计使得系统的 I/O 效率得到了显著提升。尽管这种实现方式在代码上相较于 C++ 网络服务器框架显得更加简洁，但 C++ 协程近来也在获得关注。我个人的改进设计<a href="https://oncelane.github.io/2024/08/17/xiechengkufcontextxiechengqiehuan/#more">Lane网络协程库</a>也值得一看，提供了另一种协程处理的思路。</p><p>后续就是im即时通讯这一部分该如何实</p><h1 id="IM"><a href="#IM" class="headerlink" title="IM"></a>IM</h1><p>即时通讯系统中有两个基本概念：<code>group</code>（群组）和 <code>channel</code>（通道）。其中，<code>group</code>，也称为 <code>room</code>（房间），表示一个 <code>Channel</code> 的集合，用于定义消息广播的范围。</p><p>在 IM 系统中，常见的消息转发方式包括多播（广播）和单播（一对一）。多播是 IM 系统的核心，适用于群聊等社交场景；单播则可用于游戏服务器、低延迟监控等应用场景。</p><p>如果目标是实现一个简单的群聊系统，我们需要解决以下几个问题：</p><ul><li>如何将一个 Channel 绑定到一个房间</li><li>如何管理多个房间</li><li>如何处理 Recv 通道中的数据</li></ul><p>这些问题的解决方案其实非常简单，了解了基本概念后，您会发现实现过程并不复杂。</p><pre class="line-numbers language-ascii" data-language="ascii"><code class="language-ascii">     Client1 2 and 3 are in the same room                                                                                                              This show how Client1 brocasts its msg to others in the same room:                                                                                                                                                                                                        ┌Server─────────────┐              ┌channel1───┐                         │                   │         msg1 │           │                         │                   │Client1───────►Recv chan──┼────────────────────────►│ some procress     │              │           │                         │                   │              └───────────┘                         │                   │              ┌channel2───┐                         │                   │         msg1 │           │                         └───┬───────────────┘Client2◄──────┼Send chan◄─┼───┐                         │                              │           │   │   ┌Room1──────┐         │                              └───────────┘   │   │           │         │                              ┌channel3───┐   ├───┼─          │◄────────┘select a room            msg1 │           │   │   └───────────┘                          Client3◄──────┼Send chan◄─┼───┘   ┌Room2──────┐                                        │           │       │           │                                        └───────────┘       │           │                                                            └───────────┘                                                            ┌Room3──────┐                                                            │           │                                                            │           │                                                            └───────────┘                          <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在程序中，关键在于动态管理 channel 和 room 之间的关系。这包括处理以下问题：</p><ul><li>channel 如何加入 room；</li><li>room 如何在接收到新的连接请求时自动创建；</li><li>当 channel 连接关闭时，如何通知 room 该 channel 已经不再存在。</li></ul><p>虽然这些问题较为繁琐，但并不特别困难。因此，本节主要介绍 WebSocket 的一些技术点，而非 IM 框架本身的实现细节。</p><h1 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h1><p>WebSocket 是一种基于 HTML 的网络协议，实际上属于 HTML5 协议的一部分。在 WebSocket 握手过程中，首先通过 TCP 三次握手建立 HTTP 连接，然后通过 HTTP 连接发送 WebSocket 握手请求。</p><p>WebSocket 握手请求的格式如下：</p><pre class="line-numbers language-none"><code class="language-none">GET /chat HTTP/1.1Host: server.example.comUpgrade: websocketConnection: UpgradeSec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==Sec-WebSocket-Protocol: chat, superchatSec-WebSocket-Version: 13Origin: http://example.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务端回复客户端如下：</p><pre class="line-numbers language-none"><code class="language-none">HTTP/1.1 101 Switching ProtocolsUpgrade: websocketConnection: UpgradeSec-WebSocket-Accept: K7DJLdLooIwIG/MOpvWFB3y3FE8=<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>补充一个知识点：</p><blockquote><p>golang的官方库<code>net/http</code>提供了针对html协议的网络接口，如果不进行设置，会基于tcp连接，自动完成连接的建立和断开，目的是提高易用性，减少程序员负担<br>因此，官方提供了一个放弃自动管理http连接的方式，那就是<code>net/http</code>提供<code>Hijack</code>方法，使用户可以接管html请求，即拿到原始的tcp连接，以tcp socket的方式手动操作网络io。</p></blockquote><p>也就是说，即使go官方没有提供websocket协议的实现，程序员也可以通过<code>HiJack</code> 方法拿到tcp裸连接，再自行实现websocket协议，因此go诞生了许多第三方的websocket库，请看下方各个库的性能表现</p><hr><p>20240403 16:31.05.050 [BenchEcho] Report</p><table><thead><tr><th>Framework</th><th>TPS</th><th>EER</th><th>Min</th><th>Avg</th><th>Max</th><th>TP50</th><th>TP75</th><th>TP90</th><th>TP95</th><th>TP99</th><th>Used</th><th>Total</th><th>Success</th><th>Failed</th><th>Conns</th><th>Concurrency</th><th>Payload</th><th>CPU Min</th><th>CPU Avg</th><th>CPU Max</th><th>MEM Min</th><th>MEM Avg</th><th>MEM Max</th></tr></thead><tbody><tr><td>fasthttp</td><td>770272</td><td>860.50</td><td>19.22us</td><td>12.92ms</td><td>156.10ms</td><td>11.08ms</td><td>12.77ms</td><td>19.26ms</td><td>20.36ms</td><td>32.31ms</td><td>2.60s</td><td>2000000</td><td>2000000</td><td>0</td><td>10000</td><td>10000</td><td>1024</td><td>677.71</td><td>895.15</td><td>1136.53</td><td>335.48M</td><td>335.48M</td><td>335.48M</td></tr><tr><td>gobwas</td><td>586901</td><td>505.42</td><td>15.13us</td><td>16.83ms</td><td>219.14ms</td><td>11.93ms</td><td>18.49ms</td><td>28.34ms</td><td>48.72ms</td><td>103.06ms</td><td>3.41s</td><td>2000000</td><td>2000000</td><td>0</td><td>10000</td><td>10000</td><td>1024</td><td>583.30</td><td>1161.22</td><td>1451.58</td><td>400.59M</td><td>415.20M</td><td>429.80M</td></tr><tr><td>gorilla</td><td>763962</td><td>831.85</td><td>14.81us</td><td>13.04ms</td><td>136.80ms</td><td>10.97ms</td><td>13.09ms</td><td>19.61ms</td><td>21.21ms</td><td>48.99ms</td><td>2.62s</td><td>2000000</td><td>2000000</td><td>0</td><td>10000</td><td>10000</td><td>1024</td><td>704.82</td><td>918.39</td><td>1131.96</td><td>288.24M</td><td>288.24M</td><td>288.24M</td></tr><tr><td>gws</td><td>759921</td><td>776.50</td><td>11.82us</td><td>13.12ms</td><td>156.34ms</td><td>10.83ms</td><td>14.53ms</td><td>19.60ms</td><td>21.46ms</td><td>46.94ms</td><td>2.63s</td><td>2000000</td><td>2000000</td><td>0</td><td>10000</td><td>10000</td><td>1024</td><td>760.20</td><td>978.65</td><td>1203.86</td><td>216.65M</td><td>216.65M</td><td>216.65M</td></tr><tr><td>gws_std</td><td>790027</td><td>917.34</td><td>16.70us</td><td>12.60ms</td><td>135.46ms</td><td>10.59ms</td><td>12.29ms</td><td>19.02ms</td><td>20.17ms</td><td>51.95ms</td><td>2.53s</td><td>2000000</td><td>2000000</td><td>0</td><td>10000</td><td>10000</td><td>1024</td><td>585.79</td><td>861.21</td><td>1136.64</td><td>217.44M</td><td>217.44M</td><td>217.44M</td></tr><tr><td>hertz</td><td>475530</td><td>764.06</td><td>1.07ms</td><td>20.95ms</td><td>72.61ms</td><td>18.44ms</td><td>22.35ms</td><td>34.48ms</td><td>36.80ms</td><td>42.35ms</td><td>4.21s</td><td>2000000</td><td>2000000</td><td>0</td><td>10000</td><td>10000</td><td>1024</td><td>164.81</td><td>622.37</td><td>780.84</td><td>523.80M</td><td>556.98M</td><td>590.17M</td></tr><tr><td>hertz_std</td><td>724648</td><td>1041.27</td><td>17.86us</td><td>13.74ms</td><td>236.25ms</td><td>11.40ms</td><td>12.99ms</td><td>19.87ms</td><td>22.16ms</td><td>93.24ms</td><td>2.76s</td><td>2000000</td><td>2000000</td><td>0</td><td>10000</td><td>10000</td><td>1024</td><td>0.00</td><td>695.93</td><td>1194.34</td><td>360.41M</td><td>361.41M</td><td>362.41M</td></tr><tr><td>nbio_blocking</td><td>763517</td><td>840.92</td><td>15.91us</td><td>13.02ms</td><td>125.83ms</td><td>10.96ms</td><td>13.41ms</td><td>19.41ms</td><td>20.61ms</td><td>49.08ms</td><td>2.62s</td><td>2000000</td><td>2000000</td><td>0</td><td>10000</td><td>10000</td><td>1024</td><td>693.08</td><td>907.96</td><td>1122.83</td><td>213.23M</td><td>213.23M</td><td>213.23M</td></tr><tr><td>nbio_mixed</td><td>789053</td><td>917.15</td><td>14.92us</td><td>12.60ms</td><td>148.03ms</td><td>10.54ms</td><td>12.94ms</td><td>19.24ms</td><td>20.27ms</td><td>55.67ms</td><td>2.53s</td><td>2000000</td><td>2000000</td><td>0</td><td>10000</td><td>10000</td><td>1024</td><td>603.90</td><td>860.33</td><td>1127.10</td><td>272.71M</td><td>272.71M</td><td>272.71M</td></tr><tr><td>nbio_nonblocking</td><td>717496</td><td>1044.34</td><td>29.75us</td><td>13.90ms</td><td>168.11ms</td><td>12.07ms</td><td>13.85ms</td><td>20.14ms</td><td>21.29ms</td><td>35.10ms</td><td>2.79s</td><td>2000000</td><td>2000000</td><td>0</td><td>10000</td><td>10000</td><td>1024</td><td>0.00</td><td>687.04</td><td>1142.56</td><td>86.80M</td><td>95.38M</td><td>103.96M</td></tr><tr><td>nbio_std</td><td>753412</td><td>821.57</td><td>11.66us</td><td>13.23ms</td><td>223.49ms</td><td>10.92ms</td><td>13.05ms</td><td>19.54ms</td><td>21.57ms</td><td>77.76ms</td><td>2.65s</td><td>2000000</td><td>2000000</td><td>0</td><td>10000</td><td>10000</td><td>1024</td><td>719.26</td><td>917.04</td><td>1114.81</td><td>202.95M</td><td>202.95M</td><td>202.95M</td></tr><tr><td>nettyws</td><td>778445</td><td>892.59</td><td>14.18us</td><td>12.79ms</td><td>142.58ms</td><td>10.86ms</td><td>13.31ms</td><td>19.36ms</td><td>20.35ms</td><td>27.50ms</td><td>2.57s</td><td>2000000</td><td>2000000</td><td>0</td><td>10000</td><td>10000</td><td>1024</td><td>636.37</td><td>872.12</td><td>1127.89</td><td>189.11M</td><td>189.11M</td><td>189.11M</td></tr><tr><td>nhooyr</td><td>659804</td><td>651.89</td><td>19.06us</td><td>15.10ms</td><td>181.33ms</td><td>11.14ms</td><td>14.08ms</td><td>24.10ms</td><td>37.20ms</td><td>107.87ms</td><td>3.03s</td><td>2000000</td><td>2000000</td><td>0</td><td>10000</td><td>10000</td><td>1024</td><td>24.98</td><td>1012.14</td><td>1515.70</td><td>386.97M</td><td>386.97M</td><td>386.97M</td></tr><tr><td>quickws</td><td>782685</td><td>944.61</td><td>15.31us</td><td>12.71ms</td><td>139.09ms</td><td>10.78ms</td><td>12.24ms</td><td>19.28ms</td><td>20.40ms</td><td>41.09ms</td><td>2.56s</td><td>2000000</td><td>2000000</td><td>0</td><td>10000</td><td>10000</td><td>1024</td><td>578.30</td><td>828.58</td><td>1086.75</td><td>150.31M</td><td>150.31M</td><td>150.31M</td></tr><tr><td>greatws</td><td>648302</td><td>983.04</td><td>30.80us</td><td>15.35ms</td><td>302.55ms</td><td>13.35ms</td><td>16.50ms</td><td>21.74ms</td><td>24.18ms</td><td>62.52ms</td><td>3.08s</td><td>2000000</td><td>2000000</td><td>0</td><td>10000</td><td>10000</td><td>1024</td><td>68.93</td><td>659.49</td><td>973.74</td><td>154.16M</td><td>154.71M</td><td>155.25M</td></tr><tr><td>greatws_event</td><td>657385</td><td>1158.59</td><td>28.88us</td><td>15.17ms</td><td>190.30ms</td><td>13.45ms</td><td>16.33ms</td><td>21.33ms</td><td>22.78ms</td><td>31.36ms</td><td>3.04s</td><td>2000000</td><td>2000000</td><td>0</td><td>10000</td><td>10000</td><td>1024</td><td>11.99</td><td>567.40</td><td>845.77</td><td>161.71M</td><td>163.85M</td><td>165.98M</td></tr></tbody></table><p>在诸多websocket库的实现中，<code>gorilla</code>的实现比较亮眼，下载源码后可以看到它也是通过<code>Hijack</code>方法拿到http的请求的tcp连接。</p><p>同时，查看<code>goim</code>的源码，可以看到<code>goim</code>用非常简洁的方式自行实现了完整的websocket协议，有兴趣的读者可以去阅读<code>goim</code>源码中的<a href="https://github.com/Terry-Mao/goim/tree/master/pkg/websocket">websocket 包</a>以加深对协议的理解</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>http是基于tcp连接的，tcp连接虽然是可靠，有序的，然而它却是基于字节流传输的，需要上层协议帮忙进行粘包处理，http通过\r\n等标识符区分消息边界</p><p>因此websocket协议同样需要通过自己的方式进行消息边界划分:</p><p><img src="/2024/08/18/websocketimku/1.png" alt="websocket协议 "></p><blockquote><p>BodySize范围：0&lt;=BodySize&lt;=MaxBodySize = int32(1&lt;&lt;10)</p><p>PackSize范围：RawHeaderSize&lt;=PackSize&lt;=MacPackSize(RawHeaderSize+BodySize)</p></blockquote><p>下面将介绍<code>gorilla</code>库的api</p><h1 id="gorilla"><a href="#gorilla" class="headerlink" title="gorilla"></a>gorilla</h1><p>gpt友情提供：</p><ol><li><p>建立连接</p><p> 结构体：websocket.Upgrader<br> 方法：Upgrade</p></li></ol><pre class="line-numbers language-golang" data-language="golang"><code class="language-golang">var upgrader = websocket.Upgrader{    CheckOrigin: func(r *http.Request) bool { return true }, // 允许所有来源}func handleConnection(w http.ResponseWriter, r *http.Request) {    conn, err := upgrader.Upgrade(w, r, nil)    if err != nil {        log.Fatal("Error while upgrading connection:", err)        return    }    defer conn.Close()    // 处理连接}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>查看Upgrade源码就可以看到里面出现Hijack啦</p></blockquote><ol start="2"><li><p>接收消息</p><p> 方法：ReadMessage</p></li></ol><pre class="line-numbers language-golang" data-language="golang"><code class="language-golang">messageType, p, err := conn.ReadMessage()if err != nil {    log.Println("Error while reading message:", err)    return}log.Printf("Received message: %s", p)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><p>发送消息</p><p> 方法：WriteMessage</p></li></ol><pre class="line-numbers language-golang" data-language="golang"><code class="language-golang">err := conn.WriteMessage(websocket.TextMessage, []byte("Hello, World!"))if err != nil {    log.Println("Error while sending message:", err)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><p>关闭连接</p><p> 方法：close()</p></li></ol><pre class="line-numbers language-golang" data-language="golang"><code class="language-golang">err := conn.WriteMessage(websocket.CloseMessage, websocket.FormatCloseMessage(websocket.CloseNormalClosure, ""))if err != nil {    log.Println("Error while closing connection:", err)}conn.Close();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><p>当在运行中尝试用两个go routine对同一个Conn操作并发写时，会有非常明确禁止提示</p><p>为什么不支持对同一个conn进行多线程读写？我的猜测是如果支持，库内部可能需要额外使用mutex/chan做互斥，拖慢在单线程下的性能表现</p><p>解决办法：在最开始时提到了，为每一个Conn开两个专属协程，分别进行读和写</p>]]></content>
      
      
      
        <tags>
            
            <tag> im即时通讯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>协程库-fcontext协程切换</title>
      <link href="/2024/08/17/xiechengkufcontextxiechengqiehuan/"/>
      <url>/2024/08/17/xiechengkufcontextxiechengqiehuan/</url>
      
        <content type="html"><![CDATA[<h1 id="协程库原理之协程切换"><a href="#协程库原理之协程切换" class="headerlink" title="协程库原理之协程切换"></a>协程库原理之协程切换</h1><span id="more"></span><p>协程可以分为有栈协程和无栈协程，但它们在进行切换时的核心过程是相似的。基本上，协程切换涉及将寄存器中的值保存到一个安全的地方，或者将之前保存的上下文恢复到寄存器中。</p><p>在学习如何高效地实现协程切换之前，我们首先了解<code>ucontext</code>的使用方法，然后再探讨如何用<code>fcontext</code>代替<code>ucontext</code>以提高切换效率。</p><p>使用linux下的<code>ucontext</code>进行协程切换非常简单，总共只需要用到三个接口和一个结构体</p><ol><li><p>int getcontext(ucontext_t *ucp);</p><blockquote><p>获取当前上下文</p></blockquote></li><li><p>void makecontext(ucontext_t *ucp, void (*func)(), int argc, …);</p><blockquote><p>初始化上下文，并设置上下文将执行的函数体。</p></blockquote></li><li><p>int swapcontext(ucontext_t  *oucp, const ucontext_t *ucp);</p><blockquote><p>保存当前上下文并切换到新的上下文。</p></blockquote></li></ol><p><code>ucontext_t</code>结构体定义如下</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">ucontext</span> <span class="token punctuation">{</span>              <span class="token keyword">struct</span> <span class="token class-name">ucontext</span> <span class="token operator">*</span>uc_link<span class="token punctuation">;</span><span class="token comment">// uc_link 当前协程执行完毕后默认跳转到的下一个上下文</span>              sigset_t         uc_sigmask<span class="token punctuation">;</span><span class="token comment">// 信号掩码</span>              stack_t          uc_stack<span class="token punctuation">;</span><span class="token comment">// 栈指针</span>             <span class="token comment">// 其他成员...</span>          <span class="token punctuation">}</span> ucontext_t<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里让gpt帮忙写一个demo帮助理解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ucontext.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">STACK_SIZE</span> <span class="token expression"><span class="token number">8192</span></span></span>ucontext_t main_context<span class="token punctuation">;</span>ucontext_t ctx1<span class="token punctuation">,</span> ctx2<span class="token punctuation">;</span><span class="token keyword">char</span> stack1<span class="token punctuation">[</span>STACK_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> stack2<span class="token punctuation">[</span>STACK_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 协程1</span><span class="token keyword">void</span> <span class="token function">coroutine1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Coroutine 1: Start\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 切换到协程2</span>    <span class="token function">swapcontext</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ctx1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ctx2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Coroutine 1: End\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 协程2</span><span class="token keyword">void</span> <span class="token function">coroutine2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Coroutine 2: Start\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 切换到协程1</span>    <span class="token function">swapcontext</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ctx2<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ctx1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Coroutine 2: End\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 初始化协程1上下文</span>    <span class="token function">getcontext</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ctx1<span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx1<span class="token punctuation">.</span>uc_link <span class="token operator">=</span> <span class="token operator">&amp;</span>main_context<span class="token punctuation">;</span>  <span class="token comment">// 当协程1完成后，返回到主上下文</span>    ctx1<span class="token punctuation">.</span>uc_stack<span class="token punctuation">.</span>ss_sp <span class="token operator">=</span> stack1<span class="token punctuation">;</span>    ctx1<span class="token punctuation">.</span>uc_stack<span class="token punctuation">.</span>ss_size <span class="token operator">=</span> STACK_SIZE<span class="token punctuation">;</span>    <span class="token function">makecontext</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ctx1<span class="token punctuation">,</span> coroutine1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 初始化协程2上下文</span>    <span class="token function">getcontext</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ctx2<span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx2<span class="token punctuation">.</span>uc_link <span class="token operator">=</span> <span class="token operator">&amp;</span>main_context<span class="token punctuation">;</span>  <span class="token comment">// 当协程2完成后，返回到主上下文</span>    ctx2<span class="token punctuation">.</span>uc_stack<span class="token punctuation">.</span>ss_sp <span class="token operator">=</span> stack2<span class="token punctuation">;</span>    ctx2<span class="token punctuation">.</span>uc_stack<span class="token punctuation">.</span>ss_size <span class="token operator">=</span> STACK_SIZE<span class="token punctuation">;</span>    <span class="token function">makecontext</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ctx2<span class="token punctuation">,</span> coroutine2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 启动协程1</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Main: Starting Coroutine 1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">swapcontext</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>main_context<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ctx1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Main: All coroutines completed\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这个示例演示了如何使用<code>ucontext</code>进行基本的协程切换。</p></blockquote><p>可以看到，用法是通过 <code>getcontext</code> 和 <code>makecontext</code> 来初始化协程的上下文结构体，然后调用 <code>swapcontext</code> 来进行协程上下文的切换和保存。</p><p>上面demo的代码流为：</p><blockquote><ol><li><p>主线程 -&gt; 协程1</p></li><li><p>协程1 -&gt; 协程2</p></li><li><p>协程2 -&gt; 协程1</p></li><li><p>协程1 -&gt; 主协程</p></li></ol></blockquote><p>这就是经典的对称协程设计，其中协程之间可以相互切换，地位对等，切换灵活且直接。</p><p>与对称协程对应的是非对称协程设计，其中协程分为两类：唯一的主协程和多个子协程。主协程在线程局部变量中保存，因此可以视为线程本身。主协程可以切换到任何子协程，但子协程只能切换回主协程。例如，子协程1 切换到子协程2 的最短流程为：</p><blockquote><ol><li><p>协程1 -&gt; 主协程</p></li><li><p>主协程 -&gt; 协程2</p></li></ol></blockquote><p>相较于对称协程，非对称协程在灵活性上有所欠缺，并且引入了额外的 CPU 开销。</p><p>那么，为什么我的协程库还是采用非对称协程设计呢？</p><p>因为对称协程在实际使用中存在一个问题：协程切换应该是自动的，而不是手动控制的。也就是说，协程库需要确保每个协程能以某种方式自动得知它的下一个执行者。采用对称协程设计会显著增加代码复杂度，而代码复杂度反过来会影响性能。</p><p>因此，下面将把 <code>ucontext</code> 切换方式替换为 <code>fcontext</code>，并初步设计一个非对称协程的最小模型。</p><h1 id="fcontext"><a href="#fcontext" class="headerlink" title="fcontext"></a>fcontext</h1><blockquote><p>fcontext 的 API 在 1.61 版本之前与 ucontext 非常类似，仅需修改函数名即可完成升级。然而，从 1.61 版本之后，Boost 对 fcontext 库进行了许多更改，导致 API 使用方式与之前有了很大不同，并且官方文档并不完善。因此，我进行了为期一天的测试，以基本掌握接口用法。</p></blockquote><p><code>fcontext</code>的接口包括三个函数和两个结构体：</p><ol><li><p>transfer_t  jump_fcontext( fcontext_t const to, void * vp);</p></li><li><p>fcontext_t  make_fcontext( void * sp, std::size_t size, void (* fn)( transfer_t) );</p></li><li><p>transfer_t  ontop_fcontext( fcontext_t const to, void * vp, transfer_t (* fn)( transfer_t) );</p></li></ol><p>其中，<code>fcontext_t</code>保存了协程上下文，具体的字段细节并不重要。</p><p><code>transfer_t </code>的定义如下： </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">transfer_t</span> <span class="token punctuation">{</span>    fcontext_t  fctx<span class="token punctuation">;</span> <span class="token comment">// from 协程上下文 （from！）</span>    <span class="token keyword">void</span>    <span class="token operator">*</span>   data<span class="token punctuation">;</span> <span class="token comment">// 透传指针</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>完整源码如下，明天再解析</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;boost/context/detail/fcontext.hpp&gt;</span> <span class="token comment">//主角</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cassert&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstddef&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> boost<span class="token double-colon punctuation">::</span>context<span class="token double-colon punctuation">::</span>detail<span class="token punctuation">;</span><span class="token comment">// 内存分配接口，可以优化成内存池</span><span class="token keyword">class</span> <span class="token class-name">Allocator</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">Alloc</span><span class="token punctuation">(</span>size_t size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Dealloc</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> vp<span class="token punctuation">,</span> size_t size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">free</span><span class="token punctuation">(</span>vp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">fFiber</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">thread_local</span> fFiber<span class="token operator">*</span> t_threadFiber<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">fFiber</span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">using</span> ptr <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>shared_ptr<span class="token operator">&lt;</span>fFiber<span class="token operator">&gt;</span><span class="token punctuation">;</span>    <span class="token keyword">using</span> callBack <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>    <span class="token comment">// 无参构造，用于构造本线程的主协程</span>    <span class="token function">fFiber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">m_stack</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_stackSize</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//空的，只是需要用到m_fctx来存一些东西</span>    <span class="token punctuation">}</span>    <span class="token comment">// 含参构造，用于构造一个将执行cb函数的协程对象</span>    <span class="token function">fFiber</span><span class="token punctuation">(</span>callBack _cb<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">m_cb</span><span class="token punctuation">(</span>_cb<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_stackSize</span><span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 使用malloc,分配协程栈，这里固定为4k大小</span>        m_stack <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token class-name">Allocator</span><span class="token double-colon punctuation">::</span><span class="token function">Alloc</span><span class="token punctuation">(</span>m_stackSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 构造上下文，执行要执行的函数为MainFunc</span>        m_fctx <span class="token operator">=</span> boost<span class="token double-colon punctuation">::</span>context<span class="token double-colon punctuation">::</span>detail<span class="token double-colon punctuation">::</span><span class="token function">make_fcontext</span><span class="token punctuation">(</span>            m_stack <span class="token operator">+</span> m_stackSize<span class="token punctuation">,</span> m_stackSize<span class="token punctuation">,</span> MainFunc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 析构函数，释放栈内存</span>    <span class="token operator">~</span><span class="token function">fFiber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Allocator</span><span class="token double-colon punctuation">::</span><span class="token function">Dealloc</span><span class="token punctuation">(</span>m_stack<span class="token punctuation">,</span> m_stackSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// reset接口可以复用协程对象栈，协程池</span>    <span class="token keyword">void</span> <span class="token function">reset</span><span class="token punctuation">(</span>callBack cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>        m_cb <span class="token operator">=</span> cb<span class="token punctuation">;</span>        m_fctx <span class="token operator">=</span> boost<span class="token double-colon punctuation">::</span>context<span class="token double-colon punctuation">::</span>detail<span class="token double-colon punctuation">::</span><span class="token function">make_fcontext</span><span class="token punctuation">(</span>            m_stack <span class="token operator">+</span> m_stackSize<span class="token punctuation">,</span> m_stackSize<span class="token punctuation">,</span> MainFunc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 切入协程，执行cb函数</span>    <span class="token keyword">void</span> <span class="token function">swapIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">GetThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> rt <span class="token operator">=</span> boost<span class="token double-colon punctuation">::</span>context<span class="token double-colon punctuation">::</span>detail<span class="token double-colon punctuation">::</span><span class="token function">jump_fcontext</span><span class="token punctuation">(</span>m_fctx<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 保存协程进度</span>        m_fctx <span class="token operator">=</span> rt<span class="token punctuation">.</span>fctx<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 从协程切出到本线程的主协程</span>    <span class="token keyword">void</span> <span class="token function">swapOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 问题3：为什么这里不需要接受返回值，并保存写成进度？</span>        <span class="token function">jump_fcontext</span><span class="token punctuation">(</span>t_threadFiber<span class="token operator">-&gt;</span>m_fctx<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// MainFunc用于包装cb，执行一些初始化和善后工作</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">MainFunc</span><span class="token punctuation">(</span>transfer_t in<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 主协程的上下文保存为 swapIn时的上下文</span>        t_threadFiber<span class="token operator">-&gt;</span>m_fctx <span class="token operator">=</span> in<span class="token punctuation">.</span>fctx<span class="token punctuation">;</span>        <span class="token comment">// 拿到swainIn中传入的协程体指针</span>        fFiber<span class="token operator">*</span> readyFiber <span class="token operator">=</span> <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>fFiber<span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>in<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 执行cb函数</span>        readyFiber<span class="token operator">-&gt;</span><span class="token function">m_cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 默认在函数执行完毕后切回主协程</span>        readyFiber<span class="token operator">-&gt;</span><span class="token function">swapOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 初始化并获取主协程</span>    <span class="token keyword">static</span> fFiber<span class="token operator">*</span> <span class="token function">GetThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t_threadFiber <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            t_threadFiber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">fFiber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> t_threadFiber<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    fcontext_t       m_fctx<span class="token punctuation">;</span>       <span class="token comment">// 协程上下文</span>    fFiber<span class="token double-colon punctuation">::</span>callBack m_cb<span class="token punctuation">;</span>         <span class="token comment">// 函数体</span>    <span class="token keyword">char</span><span class="token operator">*</span>            m_stack<span class="token punctuation">;</span>      <span class="token comment">// 协程栈</span>    size_t           m_stackSize<span class="token punctuation">;</span>  <span class="token comment">// 协程栈大小</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">testFiberSwapOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fFiber<span class="token operator">*</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">fFiber</span><span class="token punctuation">(</span><span class="token punctuation">[</span>f1<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"in f1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"swap out first\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f1<span class="token operator">-&gt;</span><span class="token function">swapOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"in f1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"swap out second\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f1<span class="token operator">-&gt;</span><span class="token function">swapOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"in f1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"exit f1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"in main\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"swap in first\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    f1<span class="token operator">-&gt;</span><span class="token function">swapIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"in main\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"swap in second\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    f1<span class="token operator">-&gt;</span><span class="token function">swapIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"in main\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"swap in third\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    f1<span class="token operator">-&gt;</span><span class="token function">swapIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"in main\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"exit main\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">testFiberSwapOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 协程库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIT6.5840 Lab4 Get无日志实现</title>
      <link href="/2024/04/05/mit65840lab4shixian/"/>
      <url>/2024/04/05/mit65840lab4shixian/</url>
      
        <content type="html"><![CDATA[<h1 id="6-5840-Lab-4-Fault-tolerant-Key-Value-Service"><a href="#6-5840-Lab-4-Fault-tolerant-Key-Value-Service" class="headerlink" title="6.5840 Lab 4: Fault-tolerant Key/Value Service"></a>6.5840 Lab 4: Fault-tolerant Key/Value Service</h1><p>本次实验需要结合Lab2实现的简易KVserver和Lab3实现的Raft算法，最后实现一个具有容错功能的分布式KVServer集群，难度较高</p><span id="more"></span><p>Introduction</p><blockquote><p>In this lab you will build a fault-tolerant key/value storage service using your Raft library from Lab 3. Your key/value service will be a replicated state machine, consisting of several key/value servers that each maintain a database of key/value pairs, as in Lab 2, but additionally use Raft for replication. Your key/value service should continue to process client requests as long as a majority of the servers are alive and can communicate, in spite of other failures or network partitions. After Lab 4, you will have implemented all parts (Clerk, Service, and Raft) shown in the diagram of Raft interactions.</p></blockquote><p>相比于Lab3Raft算法的实现，本次实验的代码量更少，逻辑也相对简单，但是日志量会增长一个数量级，十分不好debug，再加上一些Lab3测试都无法测出来的raft层的bug，可以说完全是debug地狱了。</p><p>本次实验需要实现我们实现一个依赖于raft的处于上层的KVserver，它接受来自客户端的Get，Put，Append请求，在客户端看来，KVServer提供的服务是是线性一致性的，也叫强一致性的</p><p>这里有一篇明晰各种一致性概念的文章，全面详细易懂，<del>唯一不好的地方就是我事后写博客的时候才发现它😭</del></p><blockquote><p><a href="https://segmentfault.com/a/1190000022248118">https://segmentfault.com/a/1190000022248118</a></p></blockquote><p>如果将客户端的Get操作也写入日志，等待Get日志被Raft层提交后再响应客户端，本实验实现起来会简洁很多，实验指导也是这么建议的。</p><p>但是我选择不将get请求写入日志（人要有追求</p><p>论文中有提到如何实现这点</p><p>1.即leader响应Get请求前先发起一次 check quorum 环节确保自己是合法的leader，我通过复用心跳来实现，下面会介绍</p><p>2.还有就是ReadIndex，记录收到Get请求那一刻的Raft层的CommitIndex值，等待应用层从raft层收到的log的index值等于ReadIndex值的时候，就可以返回此次Get请求了。</p><p>那么就可以开始写代码了：</p><h2 id="Part-A-Key-value-service-without-snapshots-moderate-hard"><a href="#Part-A-Key-value-service-without-snapshots-moderate-hard" class="headerlink" title="Part A: Key/value service without snapshots (moderate/hard)"></a>Part A: Key/value service without snapshots (moderate/hard)</h2><h3 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a>结构体定义</h3><p>日志结构体的定义</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Op <span class="token keyword">struct</span> <span class="token punctuation">{</span>ClientId <span class="token builtin">int64</span> <span class="token comment">//客户端标识，用于应对重复请求</span>Offset   <span class="token builtin">int32</span> <span class="token comment">//客户端的请求序列号</span>OpType   <span class="token builtin">int</span>   <span class="token comment">//请求/操作类型</span>Key      <span class="token builtin">string</span>Value    <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token punctuation">(</span>getT <span class="token operator">=</span> <span class="token boolean">iota</span>putTappendTemptyT <span class="token comment">//indicate a empty log only use to update leader commitIndex</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>emptyT是为了帮助leader更新commitIndex的值而使用的</p><p>KVServer成员变量：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> KVServer <span class="token keyword">struct</span> <span class="token punctuation">{</span>mu      sync<span class="token punctuation">.</span>Mutexme      <span class="token builtin">int</span>rf      <span class="token operator">*</span>raft<span class="token punctuation">.</span>RaftapplyCh <span class="token keyword">chan</span> raft<span class="token punctuation">.</span>ApplyMsgdead    <span class="token builtin">int32</span> <span class="token comment">// set by Kill()</span>maxraftstate <span class="token builtin">int</span> <span class="token comment">// snapshot if log grows this big</span>persister <span class="token operator">*</span>raft<span class="token punctuation">.</span>PersisterlastAppliedIndex <span class="token builtin">int</span> <span class="token comment">//最近添加到状态机中的raft层的log的index</span>lastIncludeIndex <span class="token builtin">int</span> <span class="token comment">//lastInclude</span>kvMap <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token comment">//log state machine</span><span class="token comment">//缓存的log, seq-&gt;index,reply</span>duplicateMap <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int64</span><span class="token punctuation">]</span>duplicateType<span class="token punctuation">}</span><span class="token keyword">type</span> duplicateType <span class="token keyword">struct</span> <span class="token punctuation">{</span>Offset <span class="token builtin">int32</span>Reply  <span class="token builtin">string</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">StartKVServer</span><span class="token punctuation">(</span>servers <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>labrpc<span class="token punctuation">.</span>ClientEnd<span class="token punctuation">,</span> me <span class="token builtin">int</span><span class="token punctuation">,</span> persister <span class="token operator">*</span>raft<span class="token punctuation">.</span>Persister<span class="token punctuation">,</span> maxraftstate <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>KVServer <span class="token punctuation">{</span><span class="token comment">// call labgob.Register on structures you want</span><span class="token comment">// Go's RPC library to marshall/unmarshall.</span>labgob<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>Op<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>labgob<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>labgob<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int64</span><span class="token punctuation">]</span>duplicateType<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>kv <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>KVServer<span class="token punctuation">)</span>kv<span class="token punctuation">.</span>me <span class="token operator">=</span> mekv<span class="token punctuation">.</span>maxraftstate <span class="token operator">=</span> maxraftstatekv<span class="token punctuation">.</span>persister <span class="token operator">=</span> persister<span class="token comment">// You may need initialization code here.</span>kv<span class="token punctuation">.</span>applyCh <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> raft<span class="token punctuation">.</span>ApplyMsg<span class="token punctuation">)</span>kv<span class="token punctuation">.</span>rf <span class="token operator">=</span> raft<span class="token punctuation">.</span><span class="token function">Make</span><span class="token punctuation">(</span>servers<span class="token punctuation">,</span> me<span class="token punctuation">,</span> persister<span class="token punctuation">,</span> kv<span class="token punctuation">.</span>applyCh<span class="token punctuation">)</span><span class="token comment">// You may need initialization code here.</span>kv<span class="token punctuation">.</span>lastAppliedIndex <span class="token operator">=</span> <span class="token number">0</span>kv<span class="token punctuation">.</span>lastIncludeIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token comment">//state machine</span>kv<span class="token punctuation">.</span>kvMap <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token comment">//log</span>kv<span class="token punctuation">.</span>duplicateMap <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int64</span><span class="token punctuation">]</span>duplicateType<span class="token punctuation">)</span>kv<span class="token punctuation">.</span><span class="token function">readPersist</span><span class="token punctuation">(</span>persister<span class="token punctuation">.</span><span class="token function">ReadSnapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">go</span> kv<span class="token punctuation">.</span><span class="token function">HandleApplych</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// go kv.HandleSnapshot()</span><span class="token comment">// go kv.handleGetTask()</span><span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"server [%d] restart"</span><span class="token punctuation">,</span> kv<span class="token punctuation">.</span>me<span class="token punctuation">)</span><span class="token keyword">return</span> kv<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么需要emptyT？</p><p>回顾commitIndex更新的限制，leader至少在自己任期内达成一条日志的大多数共识，才能够更新自己的commitIndex，其他follower才能根据leader心跳的LeaderCommit更新自己的commitIndex</p><p>如果这段时间里客户端狂发Get请求（Get请求不写入日志）没一个客户端发Put和Append请求，那么leader的commmitIndex就完全卡住了，应用层永远收不到新的applylog</p><blockquote><p>那为啥lab3实验的各种变态测试就表现的好好的，现在又不行了捏？</p></blockquote><p>因为测试代码检查通过start（）提交日志，当它发现提交的这条log没有在大多数服务器上达到共识的时候，或者说达成共识的这个Index是不是它所提交的log的时候，它会进行5次重试，（当然了如果测试程序保证在网络已经恢复正常一段时间之后再提交日志，这时候测试程序检查到Index上不是它所提交的日志，那直接就Fail Test了）保证leader一直有log可以添加，leader可以在这五次重试时间内更新好自己的commitIndex，从而将应用层想要的</p><p>既然在Lab4没有测试程序帮我们做添加log这件事，我们就自己来，</p><p>在raft层多设置两个标志，IisBack如果为true：表明leader在当前任期内达成commitIndex的更新，并且将这条属于当前任期的日志通过applyCh发送给了server层</p><p>IisBackIndex辅助IisBack更新</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Raft <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token comment">//Man,what can i say?</span>IisBack      <span class="token builtin">bool</span>IisBackIndex <span class="token builtin">int</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>leader每次刚刚当选的时候设置IisBack为false，更新commitIndex的时候设置IisBackIndex = commitIndex，当applyIndex大于等于IisBackIndex时，就可以设置IisBack为true了</p><p>leader每次响应读请求前需要检查Iisback是否为True，若为false，则需要通过start（）向raft层提交一个OpType = emptyT 的空日志，通知client过一会再来尝试，等待当前leader完成同步</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//判断自己有没有从重启中恢复完毕状态机</span><span class="token keyword">if</span> <span class="token operator">!</span>kv<span class="token punctuation">.</span>rf<span class="token punctuation">.</span>IisBack <span class="token punctuation">{</span><span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"server [%d] [recovering] reject a [Get]🔰 args[%v]"</span><span class="token punctuation">,</span> kv<span class="token punctuation">.</span>me<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span>reply<span class="token punctuation">.</span>Err <span class="token operator">=</span> ErrWaitForRecoverkv<span class="token punctuation">.</span>rf<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span>Op<span class="token punctuation">{</span>OpType<span class="token punctuation">:</span> emptyT<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h3><p>客户端结构体定义：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Clerk <span class="token keyword">struct</span> <span class="token punctuation">{</span>servers <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>labrpc<span class="token punctuation">.</span>ClientEnd<span class="token comment">// You will have to modify this struct.</span>nextSendLocalId <span class="token builtin">int</span>LatestOffset    <span class="token builtin">int32</span>clientId        <span class="token builtin">int64</span>cTos            <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>sToc            <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端发送请求逻辑：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">nrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int64</span> <span class="token punctuation">{</span>max <span class="token operator">:=</span> big<span class="token punctuation">.</span><span class="token function">NewInt</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">62</span><span class="token punctuation">)</span>bigx<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span>Reader<span class="token punctuation">,</span> max<span class="token punctuation">)</span>x <span class="token operator">:=</span> bigx<span class="token punctuation">.</span><span class="token function">Int64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> x<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">MakeClerk</span><span class="token punctuation">(</span>servers <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>labrpc<span class="token punctuation">.</span>ClientEnd<span class="token punctuation">)</span> <span class="token operator">*</span>Clerk <span class="token punctuation">{</span>ck <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Clerk<span class="token punctuation">)</span>ck<span class="token punctuation">.</span>servers <span class="token operator">=</span> servers<span class="token comment">// You'll have to add code here.</span>ck<span class="token punctuation">.</span>nextSendLocalId <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token function">nrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token function">int64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>servers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ck<span class="token punctuation">.</span>LatestOffset <span class="token operator">=</span> <span class="token number">1</span>ck<span class="token punctuation">.</span>clientId <span class="token operator">=</span> <span class="token function">nrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span>ck<span class="token punctuation">.</span>cTos <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>servers<span class="token punctuation">)</span><span class="token punctuation">)</span>ck<span class="token punctuation">.</span>sToc <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>servers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> ck<span class="token punctuation">.</span>cTos <span class="token punctuation">{</span>ck<span class="token punctuation">.</span>cTos<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>ck<span class="token punctuation">.</span>sToc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">return</span> ck<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>ck <span class="token operator">*</span>Clerk<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span><span class="token comment">// You will have to modify this function.</span>args <span class="token operator">:=</span> GetArgs<span class="token punctuation">{</span>Key<span class="token punctuation">:</span>          key<span class="token punctuation">,</span>ClientId<span class="token punctuation">:</span>     ck<span class="token punctuation">.</span>clientId<span class="token punctuation">,</span>LatestOffset<span class="token punctuation">:</span> ck<span class="token punctuation">.</span>LatestOffset<span class="token punctuation">,</span><span class="token punctuation">}</span>count <span class="token operator">:=</span> <span class="token number">0</span>lastSendLocalId <span class="token operator">:=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token keyword">for</span> <span class="token punctuation">{</span><span class="token keyword">if</span> ck<span class="token punctuation">.</span>nextSendLocalId <span class="token operator">==</span> lastSendLocalId <span class="token punctuation">{</span>count<span class="token operator">++</span><span class="token keyword">if</span> count <span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token punctuation">{</span>count <span class="token operator">=</span> <span class="token number">0</span>ck<span class="token punctuation">.</span><span class="token function">changeNextSendId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>reply <span class="token operator">:=</span> GetReply<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// DPrintf("clinet [%d] [Get]:send[%d] args[%v]", ck.clientId, ck.nextSendLocalId, args)</span>ok <span class="token operator">:=</span> ck<span class="token punctuation">.</span>servers<span class="token punctuation">[</span>ck<span class="token punctuation">.</span>nextSendLocalId<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token string">"KVServer.Get"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>args<span class="token punctuation">,</span> <span class="token operator">&amp;</span>reply<span class="token punctuation">)</span><span class="token comment">//根据reply初始化一下本地server表</span>lastSendLocalId <span class="token operator">=</span> ck<span class="token punctuation">.</span>nextSendLocalId<span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span><span class="token comment">// DPrintf("clinet [%d] [Get]:[lost] args[%v]", ck.clientId, args)</span><span class="token comment">//对面失联，那就换下一个继续发</span>ck<span class="token punctuation">.</span><span class="token function">changeNextSendId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">}</span>ck<span class="token punctuation">.</span>sToc<span class="token punctuation">[</span>reply<span class="token punctuation">.</span>ServerId<span class="token punctuation">]</span> <span class="token operator">=</span> ck<span class="token punctuation">.</span>nextSendLocalId<span class="token keyword">switch</span> reply<span class="token punctuation">.</span>Err <span class="token punctuation">{</span><span class="token keyword">case</span> OK<span class="token punctuation">:</span>ck<span class="token punctuation">.</span>LatestOffset<span class="token operator">++</span><span class="token comment">// DPrintf("clinet [%d] [Get]:[OK] get args[%v] reply[%v]", ck.clientId, args, reply)</span><span class="token keyword">return</span> reply<span class="token punctuation">.</span>Value<span class="token keyword">case</span> ErrNoKey<span class="token punctuation">:</span><span class="token comment">// DPrintf("clinet [%d] [Get]:[ErrNo key] get args[%v]", ck.clientId, args)</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token keyword">case</span> ErrWrongLeader<span class="token punctuation">:</span><span class="token comment">// DPrintf("clinet [%d] [Get]:[ErrWrong LeaderId][%d] get args[%v] reply[%v]", ck.clientId, ck.nextSendLocalId, args, reply)</span><span class="token comment">//对方也不知道leader</span><span class="token keyword">if</span> reply<span class="token punctuation">.</span>LeaderId <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span><span class="token comment">//寻找下一个</span>ck<span class="token punctuation">.</span><span class="token function">changeNextSendId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//记录对方返回的不可靠leaderId</span><span class="token keyword">if</span> ck<span class="token punctuation">.</span>sToc<span class="token punctuation">[</span>reply<span class="token punctuation">.</span>LeaderId<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span> <span class="token comment">//但是本地还没初始化呢，那就往下一个发</span>ck<span class="token punctuation">.</span><span class="token function">changeNextSendId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">//本地还真知道，那下一个就发它所指定的localServerAddress</span>ck<span class="token punctuation">.</span>nextSendLocalId <span class="token operator">=</span> ck<span class="token punctuation">.</span>sToc<span class="token punctuation">[</span>reply<span class="token punctuation">.</span>LeaderId<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">case</span> ErrWaitForRecover<span class="token punctuation">:</span><span class="token comment">// DPrintf("client [%d] [Get]:[Wait for leader recover]", ck.clientId)</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond <span class="token operator">*</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"Client [%d] Get reply unknown err [%s](probaly not init)"</span><span class="token punctuation">,</span> ck<span class="token punctuation">.</span>clientId<span class="token punctuation">,</span> reply<span class="token punctuation">.</span>Err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>ck <span class="token operator">*</span>Clerk<span class="token punctuation">)</span> <span class="token function">PutAppend</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token builtin">string</span><span class="token punctuation">,</span> op <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// You will have to modify this function.</span>args <span class="token operator">:=</span> PutAppendArgs<span class="token punctuation">{</span>Key<span class="token punctuation">:</span>          key<span class="token punctuation">,</span>Value<span class="token punctuation">:</span>        value<span class="token punctuation">,</span>Op<span class="token punctuation">:</span>           op<span class="token punctuation">,</span>ClientId<span class="token punctuation">:</span>     ck<span class="token punctuation">.</span>clientId<span class="token punctuation">,</span>LatestOffset<span class="token punctuation">:</span> ck<span class="token punctuation">.</span>LatestOffset<span class="token punctuation">,</span><span class="token punctuation">}</span>count <span class="token operator">:=</span> <span class="token number">0</span>lastSendLocalId <span class="token operator">:=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token keyword">for</span> <span class="token punctuation">{</span><span class="token keyword">if</span> ck<span class="token punctuation">.</span>nextSendLocalId <span class="token operator">==</span> lastSendLocalId <span class="token punctuation">{</span>count<span class="token operator">++</span><span class="token keyword">if</span> count <span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token punctuation">{</span>count <span class="token operator">=</span> <span class="token number">0</span>ck<span class="token punctuation">.</span><span class="token function">changeNextSendId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// DPrintf("clinet [%d] [PutAppend]:send[%d] args[%v]", ck.clientId, ck.nextSendLocalId, args)</span>reply <span class="token operator">:=</span> PutAppendReply<span class="token punctuation">{</span><span class="token punctuation">}</span>ok <span class="token operator">:=</span> ck<span class="token punctuation">.</span>servers<span class="token punctuation">[</span>ck<span class="token punctuation">.</span>nextSendLocalId<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token string">"KVServer.PutAppend"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>args<span class="token punctuation">,</span> <span class="token operator">&amp;</span>reply<span class="token punctuation">)</span><span class="token comment">//根据reply初始化一下本地server表</span>lastSendLocalId <span class="token operator">=</span> ck<span class="token punctuation">.</span>nextSendLocalId<span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span><span class="token comment">// DPrintf("clinet [%d] [PutAppend]:[lost] args[%v]", ck.clientId, args)</span><span class="token comment">//对面失联，那就换下一个继续发</span>ck<span class="token punctuation">.</span><span class="token function">changeNextSendId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">}</span>ck<span class="token punctuation">.</span>sToc<span class="token punctuation">[</span>reply<span class="token punctuation">.</span>ServerId<span class="token punctuation">]</span> <span class="token operator">=</span> ck<span class="token punctuation">.</span>nextSendLocalId<span class="token keyword">switch</span> reply<span class="token punctuation">.</span>Err <span class="token punctuation">{</span><span class="token keyword">case</span> OK<span class="token punctuation">:</span>ck<span class="token punctuation">.</span>LatestOffset<span class="token operator">++</span><span class="token comment">// DPrintf("clinet [%d] [PutAppend]:[OK] args[%v] reply[%v]", ck.clientId, args, reply)</span><span class="token keyword">return</span><span class="token keyword">case</span> ErrNoKey<span class="token punctuation">:</span><span class="token comment">// log.Fatalf("Client [%d] [PutAppend]:reply ErrNokey, but should not happend to putAndAppend args", ck.clientId)</span><span class="token keyword">case</span> ErrWrongLeader<span class="token punctuation">:</span><span class="token comment">// DPrintf("clinet [%d] [PutAppend]:[ErrWrong LeaderId][%d] get args[%v] reply[%v]", ck.clientId, ck.nextSendLocalId, args, reply)</span><span class="token comment">//对方也不知道leader</span><span class="token keyword">if</span> reply<span class="token punctuation">.</span>LeaderId <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span><span class="token comment">//寻找下一个</span>ck<span class="token punctuation">.</span><span class="token function">changeNextSendId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">//记录对方返回的不可靠leaderId</span><span class="token keyword">if</span> ck<span class="token punctuation">.</span>sToc<span class="token punctuation">[</span>reply<span class="token punctuation">.</span>LeaderId<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span> <span class="token comment">//但是本地还没初始化呢，那就往下一个发</span>ck<span class="token punctuation">.</span><span class="token function">changeNextSendId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">//本地还真知道，那下一个就发它所指定的localServerAddress</span>ck<span class="token punctuation">.</span>nextSendLocalId <span class="token operator">=</span> ck<span class="token punctuation">.</span>sToc<span class="token punctuation">[</span>reply<span class="token punctuation">.</span>LeaderId<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">default</span><span class="token punctuation">:</span>log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"Client [%d] [PutAppend]:reply unknown err [%s](probaly not init)"</span><span class="token punctuation">,</span> ck<span class="token punctuation">.</span>clientId<span class="token punctuation">,</span> reply<span class="token punctuation">.</span>Err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>ck <span class="token operator">*</span>Clerk<span class="token punctuation">)</span> <span class="token function">changeNextSendId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>ck<span class="token punctuation">.</span>nextSendLocalId <span class="token operator">=</span> <span class="token punctuation">(</span>ck<span class="token punctuation">.</span>nextSendLocalId <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token function">len</span><span class="token punctuation">(</span>ck<span class="token punctuation">.</span>servers<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>ck <span class="token operator">*</span>Clerk<span class="token punctuation">)</span> <span class="token function">Put</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>ck<span class="token punctuation">.</span><span class="token function">PutAppend</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token string">"Put"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>ck <span class="token operator">*</span>Clerk<span class="token punctuation">)</span> <span class="token function">Append</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>ck<span class="token punctuation">.</span><span class="token function">PutAppend</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token string">"Append"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端实现的难点只有一个：实现快速定位leader</p><p>客户端所知道的服务器ID servers []*labrpc.ClientEnd 与服务器自己认知体系里的服务器ID完全没有关系  </p><p>客户端想要解析服务端发送回来的LeaderId究竟对应自己本地server数组里的哪个下标，就需要建立一个映射表（地址变换表）</p><p>我也是用一个笨方法来实现，服务器每次响应都同时带上自己的index和它所知道的leaderId，客户端根据index更新映射表，然后检查leaderId在映射表里有没有被更新过，没有就向下一个服务器继续发，有就好办了，下次发请求直达leader</p><p>当然，服务器返回的leaderId并非是那么的有参考价值，考虑到网络分区的情况，在一个小分区中follower们跟定了一个小leader，导致客户端得到了假leaderId，后续怎么发送请求都得不到回应</p><p>我的处理方法是只对同一个leader重试5次，再有下次就换人！惯不了一点</p><h3 id="服务端代码"><a href="#服务端代码" class="headerlink" title="服务端代码"></a>服务端代码</h3><p>线性一致的读请求处理：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>kv <span class="token operator">*</span>KVServer<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>args <span class="token operator">*</span>GetArgs<span class="token punctuation">,</span> reply <span class="token operator">*</span>GetReply<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// Your code here.</span>reply<span class="token punctuation">.</span>Value <span class="token operator">=</span> <span class="token string">"i should not with ok symble"</span>reply<span class="token punctuation">.</span>Err <span class="token operator">=</span> ErrWrongLeaderreply<span class="token punctuation">.</span>LeaderId <span class="token operator">=</span> kv<span class="token punctuation">.</span>rf<span class="token punctuation">.</span><span class="token function">GetleaderId</span><span class="token punctuation">(</span><span class="token punctuation">)</span>reply<span class="token punctuation">.</span>ServerId <span class="token operator">=</span> kv<span class="token punctuation">.</span>me<span class="token comment">//判断自己是不是leader</span><span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> kv<span class="token punctuation">.</span>rf<span class="token punctuation">.</span><span class="token function">GetState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span><span class="token comment">// DPrintf("server [%d] [info] i am leader", kv.me)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">// DPrintf("server [%d] [info] i am not leader ,leader is [%d]", kv.me, reply.LeaderId)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token comment">//判断自己有没有从重启中恢复完毕状态机</span><span class="token keyword">if</span> <span class="token operator">!</span>kv<span class="token punctuation">.</span>rf<span class="token punctuation">.</span>IisBack <span class="token punctuation">{</span><span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"server [%d] [recovering] reject a [Get]🔰 args[%v]"</span><span class="token punctuation">,</span> kv<span class="token punctuation">.</span>me<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">)</span>reply<span class="token punctuation">.</span>Err <span class="token operator">=</span> ErrWaitForRecoverkv<span class="token punctuation">.</span>rf<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span>Op<span class="token punctuation">{</span>OpType<span class="token punctuation">:</span> emptyT<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>readLastIndex <span class="token operator">:=</span> kv<span class="token punctuation">.</span>rf<span class="token punctuation">.</span><span class="token function">GetCommitIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>term <span class="token operator">:=</span> kv<span class="token punctuation">.</span>rf<span class="token punctuation">.</span><span class="token function">GetTerm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//需要发送一轮心跳获得大多数回复，只是为了确定没有一个任期更加新的leader，保证自己的数据不是脏的</span><span class="token keyword">if</span> kv<span class="token punctuation">.</span>rf<span class="token punctuation">.</span><span class="token function">CheckIfDepose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>reply<span class="token punctuation">.</span>Err <span class="token operator">=</span> ErrWrongLeader<span class="token keyword">return</span><span class="token punctuation">}</span><span class="token comment">//return false表明自己是合法leader</span>kv<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> kv<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//跟raft层之间的同步问题，raft刚当选leader的时候，还没有</span><span class="token comment">//直接返回</span>value<span class="token punctuation">,</span> find <span class="token operator">:=</span> kv<span class="token punctuation">.</span>kvMap<span class="token punctuation">[</span>args<span class="token punctuation">.</span>Key<span class="token punctuation">]</span><span class="token keyword">if</span> find <span class="token punctuation">{</span><span class="token keyword">if</span> kv<span class="token punctuation">.</span>lastAppliedIndex <span class="token operator">&gt;=</span> readLastIndex <span class="token operator">&amp;&amp;</span> kv<span class="token punctuation">.</span>rf<span class="token punctuation">.</span><span class="token function">GetLeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> term <span class="token operator">==</span> kv<span class="token punctuation">.</span>rf<span class="token punctuation">.</span><span class="token function">GetTerm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>reply<span class="token punctuation">.</span>Err <span class="token operator">=</span> OKreply<span class="token punctuation">.</span>Value <span class="token operator">=</span> value<span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"server [%d] [Get] [ok] lastAppliedIndex[%d] readLastIndex[%d]"</span><span class="token punctuation">,</span> kv<span class="token punctuation">.</span>me<span class="token punctuation">,</span> kv<span class="token punctuation">.</span>lastAppliedIndex<span class="token punctuation">,</span> readLastIndex<span class="token punctuation">)</span><span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"server [%d] [Get] [Ok] the get args[%v] reply[%v]"</span><span class="token punctuation">,</span> kv<span class="token punctuation">.</span>me<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">*</span>reply<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>reply<span class="token punctuation">.</span>Err <span class="token operator">=</span> ErrWaitForRecover<span class="token comment">// DPrintf("server [%d] [Get] [ErrWaitForRecover] kv.lastAppliedIndex &lt; readLastIndex args[%v] reply[%v]", kv.me, *args, *reply)</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>reply<span class="token punctuation">.</span>Err <span class="token operator">=</span> ErrNoKey<span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"server [%d] [Get] [NoKey] the get args[%v] reply[%v]"</span><span class="token punctuation">,</span> kv<span class="token punctuation">.</span>me<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">*</span>reply<span class="token punctuation">)</span><span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"server [%d] [map] -&gt; %v"</span><span class="token punctuation">,</span> kv<span class="token punctuation">.</span>me<span class="token punctuation">,</span> kv<span class="token punctuation">.</span>kvMap<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>kv.lastAppliedIndex &gt;= readLastIndex &amp;&amp; kv.rf.GetLeader() &amp;&amp; term == kv.rf.GetTerm()</p><p>实现好这个判断基本就能解决读操作线性一致了</p><p>Put和Append操作的线性一致性实现：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>kv <span class="token operator">*</span>KVServer<span class="token punctuation">)</span> <span class="token function">PutAppend</span><span class="token punctuation">(</span>args <span class="token operator">*</span>PutAppendArgs<span class="token punctuation">,</span> reply <span class="token operator">*</span>PutAppendReply<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// Your code here.</span>reply<span class="token punctuation">.</span>LeaderId <span class="token operator">=</span> kv<span class="token punctuation">.</span>rf<span class="token punctuation">.</span><span class="token function">GetleaderId</span><span class="token punctuation">(</span><span class="token punctuation">)</span>reply<span class="token punctuation">.</span>Err <span class="token operator">=</span> ErrWrongLeaderreply<span class="token punctuation">.</span>ServerId <span class="token operator">=</span> kv<span class="token punctuation">.</span>me<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> kv<span class="token punctuation">.</span>rf<span class="token punctuation">.</span><span class="token function">GetState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span><span class="token comment">// DPrintf("server [%d] [info] i am leader", kv.me)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">// DPrintf("server [%d] [info] i am not leader ,leader is [%d]", kv.me, reply.LeaderId)</span><span class="token keyword">return</span><span class="token punctuation">}</span>op <span class="token operator">:=</span> Op<span class="token punctuation">{</span>ClientId<span class="token punctuation">:</span> args<span class="token punctuation">.</span>ClientId<span class="token punctuation">,</span>Offset<span class="token punctuation">:</span>   args<span class="token punctuation">.</span>LatestOffset<span class="token punctuation">,</span>Key<span class="token punctuation">:</span>      args<span class="token punctuation">.</span>Key<span class="token punctuation">,</span>Value<span class="token punctuation">:</span>    args<span class="token punctuation">.</span>Value<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">switch</span> args<span class="token punctuation">.</span>Op <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token string">"Put"</span><span class="token punctuation">:</span>op<span class="token punctuation">.</span>OpType <span class="token operator">=</span> putT<span class="token keyword">case</span> <span class="token string">"Append"</span><span class="token punctuation">:</span>op<span class="token punctuation">.</span>OpType <span class="token operator">=</span> appendT<span class="token keyword">default</span><span class="token punctuation">:</span>log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"unreconize put append args.Op:%s"</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span>Op<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// DPrintf("server [%d] [PutAppend] 📨receive a args[%v]", kv.me, *args)</span><span class="token comment">// defer DPrintf("server [%d] [PutAppend] 📨complete a args[%v]", kv.me, *args)</span><span class="token comment">//start前需要查看本地log缓存是否有seq</span><span class="token comment">//这里通过缓存提交，一方面提高了kvserver应对网络错误的回复速度，另一方面进行了第一层的重复检测</span><span class="token comment">//但是注意可能同时有两个相同的getDuplicateMap通过这里</span>kv<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> args<span class="token punctuation">.</span>LatestOffset <span class="token operator">&lt;</span> kv<span class="token punctuation">.</span>duplicateMap<span class="token punctuation">[</span>args<span class="token punctuation">.</span>ClientId<span class="token punctuation">]</span><span class="token punctuation">.</span>Offset <span class="token punctuation">{</span>kv<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">if</span> args<span class="token punctuation">.</span>LatestOffset <span class="token operator">==</span> kv<span class="token punctuation">.</span>duplicateMap<span class="token punctuation">[</span>args<span class="token punctuation">.</span>ClientId<span class="token punctuation">]</span><span class="token punctuation">.</span>Offset <span class="token punctuation">{</span>reply<span class="token punctuation">.</span>Err <span class="token operator">=</span> OKkv<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>kv<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//没有在本地缓存发现过seq</span><span class="token comment">//向raft提交操作</span>index<span class="token punctuation">,</span> term<span class="token punctuation">,</span> isleader <span class="token operator">:=</span> kv<span class="token punctuation">.</span>rf<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">!</span>isleader <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span>kv<span class="token punctuation">.</span>rf<span class="token punctuation">.</span><span class="token function">SendAppendEntriesToAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"server [%d] submit to raft key[%v] value[%v]"</span><span class="token punctuation">,</span> kv<span class="token punctuation">.</span>me<span class="token punctuation">,</span> op<span class="token punctuation">.</span>Key<span class="token punctuation">,</span> op<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token comment">//提交后阻塞等待</span><span class="token comment">//等待applyCh拿到对应的index，比对seq是否正确</span>startWait <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token operator">!</span>kv<span class="token punctuation">.</span><span class="token function">killed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>kv<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> index <span class="token operator">&lt;=</span> kv<span class="token punctuation">.</span>lastAppliedIndex <span class="token punctuation">{</span><span class="token comment">//双重防重复</span><span class="token keyword">if</span> args<span class="token punctuation">.</span>LatestOffset <span class="token operator">&lt;</span> kv<span class="token punctuation">.</span>duplicateMap<span class="token punctuation">[</span>args<span class="token punctuation">.</span>ClientId<span class="token punctuation">]</span><span class="token punctuation">.</span>Offset <span class="token punctuation">{</span>kv<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">if</span> args<span class="token punctuation">.</span>LatestOffset <span class="token operator">==</span> kv<span class="token punctuation">.</span>duplicateMap<span class="token punctuation">[</span>args<span class="token punctuation">.</span>ClientId<span class="token punctuation">]</span><span class="token punctuation">.</span>Offset <span class="token punctuation">{</span>reply<span class="token punctuation">.</span>Err <span class="token operator">=</span> OKkv<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token comment">// DPrintf("server [%d] [PutAppend] appliedIndex available :PutAppend index[%d] lastAppliedIndex[%d]", kv.me, index, kv.lastAppliedIndex)</span><span class="token keyword">if</span> term <span class="token operator">!=</span> kv<span class="token punctuation">.</span>rf<span class="token punctuation">.</span><span class="token function">GetTerm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//term不匹配了，说明本次提交失效</span>kv<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span> <span class="token comment">//term匹配，说明本次提交一定是有效的</span>reply<span class="token punctuation">.</span>Err <span class="token operator">=</span> OK<span class="token comment">// DPrintf("server [%d] [PutAppend] success args.index[%d], args[%v] reply[%v]", kv.me, index, *args, *reply)</span>kv<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> isleader <span class="token operator">:=</span> kv<span class="token punctuation">.</span>rf<span class="token punctuation">.</span><span class="token function">GetState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">!</span>isleader <span class="token punctuation">{</span>reply<span class="token punctuation">.</span>Err <span class="token operator">=</span> ErrWrongLeader<span class="token punctuation">}</span><span class="token keyword">return</span><span class="token punctuation">}</span>kv<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//超过2s没等到applych，那就返回wrong</span><span class="token keyword">if</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>startWait<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Milliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">500</span> <span class="token punctuation">{</span><span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"server [%d] [PutAppend] fail [time out] args.index[%d]"</span><span class="token punctuation">,</span> kv<span class="token punctuation">.</span>me<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不要幻想像在Lab2里实现的那样，在server响应client的时候通过简单的ClientId和Offset比较就能搞定重复的非安全非幂等请求</p><p>多服务端的情况下，对于新leader的duplicateMap，这项值只保障最终一致性，并不一保障任何时刻都是最新的强一致性，所以这项判断放在client和server之间是不能百分百保证数据库安全的，还需要在server层和raft层之间实现去重。</p><p>不过这段代码放在这里确实有意义的，网络混乱的情况下它确实不能百分百解决问题，但在网络一切正常的时候它还是能起到作用的</p><p>如何实现server层和raft层之间的去重？根据log中保存的clientIndex和Offer。</p><p>这两项值经过raft转手后再次回到server，那意义可就大了，因为它借助raft层实现了强一致性，即大多数服务器上，log是线性一致的，所有服务器的log顺序都一模一样</p><p>处理raft层提交log的代码：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token operator">/</span> state machine<span class="token comment">// 将value重新转换为 Op，添加到本地kvMap中</span><span class="token keyword">func</span> <span class="token punctuation">(</span>kv <span class="token operator">*</span>KVServer<span class="token punctuation">)</span> <span class="token function">HandleApplych</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token operator">!</span>kv<span class="token punctuation">.</span><span class="token function">killed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">select</span> <span class="token punctuation">{</span><span class="token keyword">case</span> raft_type <span class="token operator">:=</span> <span class="token operator">&lt;-</span>kv<span class="token punctuation">.</span>applyCh<span class="token punctuation">:</span><span class="token keyword">if</span> kv<span class="token punctuation">.</span><span class="token function">killed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span>kv<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> raft_type<span class="token punctuation">.</span>CommandValid <span class="token punctuation">{</span>kv<span class="token punctuation">.</span><span class="token function">HandleApplychCommand</span><span class="token punctuation">(</span>raft_type<span class="token punctuation">)</span>kv<span class="token punctuation">.</span><span class="token function">checkIfExcExccdLog</span><span class="token punctuation">(</span>raft_type<span class="token punctuation">.</span>CommandIndex<span class="token punctuation">)</span>kv<span class="token punctuation">.</span>lastAppliedIndex <span class="token operator">=</span> raft_type<span class="token punctuation">.</span>CommandIndex<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> raft_type<span class="token punctuation">.</span>SnapshotValid <span class="token punctuation">{</span><span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"📷 server [%d] receive raftSnapshotIndex[%d]"</span><span class="token punctuation">,</span> kv<span class="token punctuation">.</span>me<span class="token punctuation">,</span> raft_type<span class="token punctuation">.</span>SnapshotIndex<span class="token punctuation">)</span>kv<span class="token punctuation">.</span><span class="token function">HandleApplychSnapshot</span><span class="token punctuation">(</span>raft_type<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"Unrecordnized applyArgs type"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>kv<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>kv <span class="token operator">*</span>KVServer<span class="token punctuation">)</span> <span class="token function">HandleApplychCommand</span><span class="token punctuation">(</span>raft_type raft<span class="token punctuation">.</span>ApplyMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>op_type<span class="token punctuation">,</span> ok <span class="token operator">:=</span> raft_type<span class="token punctuation">.</span>Command<span class="token punctuation">.</span><span class="token punctuation">(</span>Op<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"raft applyArgs.command -&gt; Op 失败,raft_type.Command = %v"</span><span class="token punctuation">,</span> raft_type<span class="token punctuation">.</span>Command<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> op_type<span class="token punctuation">.</span>OpType <span class="token operator">==</span> emptyT <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">switch</span> op_type<span class="token punctuation">.</span>OpType <span class="token punctuation">{</span><span class="token keyword">case</span> putT<span class="token punctuation">:</span><span class="token comment">//更新状态机</span><span class="token comment">//有可能有多个start重复执行，所以这一步要检验重复</span><span class="token keyword">if</span> op_type<span class="token punctuation">.</span>Offset <span class="token operator">&lt;=</span> kv<span class="token punctuation">.</span>duplicateMap<span class="token punctuation">[</span>op_type<span class="token punctuation">.</span>ClientId<span class="token punctuation">]</span><span class="token punctuation">.</span>Offset <span class="token punctuation">{</span><span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"⛔server [%d] [Put] [%v] lastapplied[%v]find in the cache and discard %v"</span><span class="token punctuation">,</span> kv<span class="token punctuation">.</span>me<span class="token punctuation">,</span> op_type<span class="token punctuation">,</span> kv<span class="token punctuation">.</span>lastAppliedIndex<span class="token punctuation">,</span> kv<span class="token punctuation">.</span>kvMap<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>kv<span class="token punctuation">.</span>duplicateMap<span class="token punctuation">[</span>op_type<span class="token punctuation">.</span>ClientId<span class="token punctuation">]</span> <span class="token operator">=</span> duplicateType<span class="token punctuation">{</span>Offset<span class="token punctuation">:</span> op_type<span class="token punctuation">.</span>Offset<span class="token punctuation">,</span>Reply<span class="token punctuation">:</span>  <span class="token string">""</span><span class="token punctuation">,</span><span class="token punctuation">}</span>kv<span class="token punctuation">.</span>kvMap<span class="token punctuation">[</span>op_type<span class="token punctuation">.</span>Key<span class="token punctuation">]</span> <span class="token operator">=</span> op_type<span class="token punctuation">.</span>Value<span class="token comment">// DPrintf("server [%d] [Update] [Put]-&gt;[%s,%s] [map] -&gt; %v", kv.me, op_type.Key, op_type.Value, kv.kvMap)</span><span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"server [%d] [Update] [Put]-&gt;[%s : %s] "</span><span class="token punctuation">,</span> kv<span class="token punctuation">.</span>me<span class="token punctuation">,</span> op_type<span class="token punctuation">.</span>Key<span class="token punctuation">,</span> op_type<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token keyword">case</span> appendT<span class="token punctuation">:</span><span class="token comment">//更新状态机</span><span class="token keyword">if</span> op_type<span class="token punctuation">.</span>Offset <span class="token operator">&lt;=</span> kv<span class="token punctuation">.</span>duplicateMap<span class="token punctuation">[</span>op_type<span class="token punctuation">.</span>ClientId<span class="token punctuation">]</span><span class="token punctuation">.</span>Offset <span class="token punctuation">{</span><span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"⛔server [%d] [Append] [%v] lastapplied[%v]find in the cache and discard %v"</span><span class="token punctuation">,</span> kv<span class="token punctuation">.</span>me<span class="token punctuation">,</span> op_type<span class="token punctuation">,</span> kv<span class="token punctuation">.</span>lastAppliedIndex<span class="token punctuation">,</span> kv<span class="token punctuation">.</span>kvMap<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>kv<span class="token punctuation">.</span>duplicateMap<span class="token punctuation">[</span>op_type<span class="token punctuation">.</span>ClientId<span class="token punctuation">]</span> <span class="token operator">=</span> duplicateType<span class="token punctuation">{</span>Offset<span class="token punctuation">:</span> op_type<span class="token punctuation">.</span>Offset<span class="token punctuation">,</span>Reply<span class="token punctuation">:</span>  <span class="token string">""</span><span class="token punctuation">,</span><span class="token punctuation">}</span>kv<span class="token punctuation">.</span>kvMap<span class="token punctuation">[</span>op_type<span class="token punctuation">.</span>Key<span class="token punctuation">]</span> <span class="token operator">+=</span> op_type<span class="token punctuation">.</span>Value<span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"server [%d] [Update] [Append]-&gt;[%s : %s]"</span><span class="token punctuation">,</span> kv<span class="token punctuation">.</span>me<span class="token punctuation">,</span> op_type<span class="token punctuation">.</span>Key<span class="token punctuation">,</span> op_type<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token keyword">case</span> getT<span class="token punctuation">:</span>log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"日志中不应该出现getType"</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token punctuation">:</span>log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"日志中出现未知optype = [%d]"</span><span class="token punctuation">,</span> op_type<span class="token punctuation">.</span>OpType<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>去重代码的原理跟Lab2中实现的去重原理是一致的</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> op_type<span class="token punctuation">.</span>Offset <span class="token operator">&lt;=</span> kv<span class="token punctuation">.</span>duplicateMap<span class="token punctuation">[</span>op_type<span class="token punctuation">.</span>ClientId<span class="token punctuation">]</span><span class="token punctuation">.</span>Offset <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span>kv<span class="token punctuation">.</span>duplicateMap<span class="token punctuation">[</span>op_type<span class="token punctuation">.</span>ClientId<span class="token punctuation">]</span> <span class="token operator">=</span> duplicateType<span class="token punctuation">{</span>Offset<span class="token punctuation">:</span> op_type<span class="token punctuation">.</span>Offset<span class="token punctuation">,</span>Reply<span class="token punctuation">:</span>  <span class="token string">""</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Part-B-Key-value-service-with-snapshots-hard"><a href="#Part-B-Key-value-service-with-snapshots-hard" class="headerlink" title="Part B: Key/value service with snapshots (hard)"></a>Part B: Key/value service with snapshots (hard)</h2><p>本次实验增加了对raftState大小的限制，当raft层的log数量接近限制的时候，server层就向raft发出snapshot命令，然后将server层的kvMap duplicateMap这两项放入snapshotDate里让raft帮忙持久化。</p><p>由于snapshot截断日志的效果，duplicateMap如果不同步进行持久化，很有可能因为缺少log而无法正确去重</p><blockquote><p>为什么这么说？很简单，两个重读的Put请求，一个在因为snapshot而截断丢弃的log中，另一个在snpashotIndex之后</p><p>server层和raft层之间去重的时候，duplicateMap无法缓存到前一个Put请求，从而允许下一个重复的put请求被应用到数据库中</p></blockquote><p>代码实现：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 主动快照,每一个服务器都在自己log超标的时候启动快照</span><span class="token keyword">func</span> <span class="token punctuation">(</span>kv <span class="token operator">*</span>KVServer<span class="token punctuation">)</span> <span class="token function">checkIfNeedSnapshot</span><span class="token punctuation">(</span>spanshotindex <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> kv<span class="token punctuation">.</span>maxraftstate <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token operator">!</span>kv<span class="token punctuation">.</span>rf<span class="token punctuation">.</span><span class="token function">IfNeedExceedLog</span><span class="token punctuation">(</span>kv<span class="token punctuation">.</span>maxraftstate<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span> <span class="token comment">//需要进行快照了</span><span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"server [%d] need snapshot limit[%d] curRaftStatesize[%d] snapshotIndex[%d]"</span><span class="token punctuation">,</span> kv<span class="token punctuation">.</span>me<span class="token punctuation">,</span> kv<span class="token punctuation">.</span>maxraftstate<span class="token punctuation">,</span> kv<span class="token punctuation">.</span>persister<span class="token punctuation">.</span><span class="token function">RaftStateSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> spanshotindex<span class="token punctuation">)</span><span class="token comment">//首先查看一下自己的状态机应用到了那一步</span><span class="token keyword">var</span> buf bytes<span class="token punctuation">.</span>Bufferenc <span class="token operator">:=</span> gob<span class="token punctuation">.</span><span class="token function">NewEncoder</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">:=</span> enc<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span>kv<span class="token punctuation">.</span>duplicateMap<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"snapshot duplicateMap encoder fail:%s"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> err <span class="token operator">:=</span> enc<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span>kv<span class="token punctuation">.</span>kvMap<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"snapshot kvMap encoder fail:%s"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//将状态机传了进去</span>kv<span class="token punctuation">.</span>rf<span class="token punctuation">.</span><span class="token function">Snapshot</span><span class="token punctuation">(</span>spanshotindex<span class="token punctuation">,</span> buf<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 被动快照</span><span class="token keyword">func</span> <span class="token punctuation">(</span>kv <span class="token operator">*</span>KVServer<span class="token punctuation">)</span> <span class="token function">readPersist</span><span class="token punctuation">(</span>data <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> data <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> <span class="token function">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"server [%d] passive 📷 len of snapshotdate[%d] "</span><span class="token punctuation">,</span> kv<span class="token punctuation">.</span>me<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"server [%d] before map[%v]"</span><span class="token punctuation">,</span> kv<span class="token punctuation">.</span>me<span class="token punctuation">,</span> kv<span class="token punctuation">.</span>kvMap<span class="token punctuation">)</span>r <span class="token operator">:=</span> bytes<span class="token punctuation">.</span><span class="token function">NewBuffer</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>d <span class="token operator">:=</span> gob<span class="token punctuation">.</span><span class="token function">NewDecoder</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>kvMap <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span>duplicateMap <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int64</span><span class="token punctuation">]</span>duplicateType<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">:=</span> d<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>duplicateMap<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"decode err:%s"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> err <span class="token operator">:=</span> d<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kvMap<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"decode err:%s"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span>kv<span class="token punctuation">.</span>kvMap <span class="token operator">=</span> kvMapkv<span class="token punctuation">.</span>duplicateMap <span class="token operator">=</span> duplicateMap<span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"server [%d] after map[%v]"</span><span class="token punctuation">,</span> kv<span class="token punctuation">.</span>me<span class="token punctuation">,</span> kv<span class="token punctuation">.</span>kvMap<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>主动快照是为了保障raftState的大小不要太大，由server主观调用</p><p>被动快照是raft层为了解决主动快照带来的日志复制问题而进行的，两者意义不同</p></blockquote><p><img src="/2024/04/05/mit65840lab4shixian/11.png" alt="测试"></p><p><img src="/2024/04/05/mit65840lab4shixian/10.png" alt="多次测试"></p><p>实验过程还有一些细节</p><p>想起来再写</p>]]></content>
      
      
      
        <tags>
            
            <tag> MIT6.5840 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIT6.5840 Lab3 实现</title>
      <link href="/2024/04/04/mit65840lab3shixian/"/>
      <url>/2024/04/04/mit65840lab3shixian/</url>
      
        <content type="html"><![CDATA[<h1 id="6-5840-Lab-3-Raft"><a href="#6-5840-Lab-3-Raft" class="headerlink" title="6.5840 Lab 3: Raft"></a>6.5840 Lab 3: Raft</h1><p>本节实验的目标是实现Raft分布一致性算法，不必多说，此节为所有实验中最重要的部分，也是最能劝退实验者的一节</p><p>在实验开始前一定要仔细阅读raft论文，编写代码中也要反复确认有没有正确实现论文中的规则</p><p><a href="https://pdos.csail.mit.edu/6.824/papers/raft-extended.pdf">extended Raft paper</a></p><span id="more"></span><p>论文中最重要的图：</p><p><img src="/2024/04/04/mit65840lab3shixian/7.png" alt="Raft协议"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>raft算法就不在这详细介绍了，不自行阅读论文等资料是不可能独立完成本实验的</p><p>由于本人一开始没有使用git进行版本管理，因此初次通过A、B、C部分的代码都没有得到保留，只留下了最终通过D部分的代码。</p><p>由于ABCD四个part的实验是增量的关系，后续的测试还会间接地加强测试前面实现的内容，初次通过测试通过的代码段并不一定就是正确的，会在后续的严格测试中暴露出问题。</p><p>所以ABC三部分就不放具体代码了，主要以介绍我在实验中的思路，遇到的坑为主。</p><p>再次强调的是，前期实现的raft算法必须坚固可靠，否则后面回过头来修改会非常的痛苦。建议使用第三方测试脚本并行跑实验测试，至少也要保证能够连续100次通过实验，理想的通过次数应该是千次吧…鉴于本人电脑CPU比较垃圾，也就跑跑百次级别的实验。（在攥写博客期间进行过几次高并行测试，也是直接把虚拟机干崩溃了</p><h2 id="Part-3A-leader-election-moderate"><a href="#Part-3A-leader-election-moderate" class="headerlink" title="Part 3A: leader election (moderate)"></a>Part 3A: leader election (moderate)</h2><p>简介：</p><blockquote><p>Implement Raft <strong>leader election</strong> and <strong>heartbeats</strong> (AppendEntries RPCs with no log entries). The goal for Part 3A is for a single leader to be elected, for the leader to remain the leader if there are no failures, and for a new leader to take over if the old leader fails or if packets to/from the old leader are lost. Run go test -run 3A to test your 3A code.</p></blockquote><p>partA需要实现<strong>领导人选举机制</strong>和<strong>心跳机制</strong></p><p>列举一下实验中比较重要的Hint：</p><blockquote><p>The tester requires that the leader send heartbeat RPCs no more than ten times per second.</p></blockquote><p>这项限制并没有想象中的那么严格，是可以直接让leader发送AE的间隔为90~100ms的，心跳包检测测试只统计最后的总RPC数目</p><blockquote><p>The tester requires your Raft to elect a new leader within five seconds of the failure of the old leader (if a majority of peers can still communicate).</p></blockquote><p>如果当前网络环境是可以产生领导人的（即使网络故障分区了，如果某个分区包含了半数以上的服务器），这是个非常重要的限制，初次实验大多数的错误都可以被这条规则检测出来，同时，在后面的实验中，这条规则也许会成为最难逾越的一道难关</p><blockquote><p>The paper’s Section 5.2 mentions election timeouts in the range of 150 to 300 milliseconds. Such a range only makes sense if the leader sends heartbeats considerably more often than once per 150 milliseconds (e.g., once per 10 milliseconds). Because the tester limits you tens of heartbeats per second, you will have to use an election timeout larger than the paper’s 150 to 300 milliseconds, but not too large, because then you may fail to elect a leader within five seconds.</p></blockquote><p>合理设计Election Timeout Interval，它必须是个随机值，下限应当能够容纳三四次心跳包的正常发送，随机取值范围不能太小，否则选举过程很难成功。太大则影响效率</p><blockquote><p><strong>You’ll need to write code that takes actions periodically or after delays in time. The easiest way to do this is to create a goroutine with a loop that calls time.Sleep(); see the ticker() goroutine that Make() creates for this purpose. Don’t use Go’s time.Timer or time.Ticker, which are difficult to use correctly.</strong></p></blockquote><p>这是相当有价值的忠告，建议用sleep的方式实现超时机制，慎用timer和ticker，它们非常被难以正确使用。</p><p>本人也是尝试过使用timer和ticker重构代码，属于是把脑子榨干了都没搞定。</p><blockquote><p>The tester calls your Raft’s rf.Kill() when it is permanently shutting down an instance. You can check whether Kill() has been called using rf.killed(). You may want to do this in all loops, to avoid having dead Raft instances print confusing messages.</p></blockquote><p>这个是跟测试环境有关的忠告，任何使用了for死循环的地方都要加上!rf.killed()代码提供中止，主要是给测试框架使用的，如果这里没实现好，后面会出现及其玄学且无法排查的bug。具体表现为单个测试能够多次通过，但是连起来测试就疯狂出错…</p><blockquote><p>Go RPC sends only struct fields whose names start with capital letters. Sub-structures must also have capitalized field names (e.g. fields of log records in an array). The labgob package will warn you about this; don’t ignore the warnings.</p></blockquote><p>RPC调用函数和其参数：args和replys结构体中的名字都必须以大写开头，这是go语言的特性，无论是方法名、常量、变量名还是结构体的名称，如果首字母大写，则可以被其他的包访问；如果首字母小写，则只能在本包中使用。可以粗暴的理解为首字母大写是公有的，首字母小写是私有的。</p><blockquote><p>The most challenging part of this lab may be the debugging. Spend some time making your implementation easy to debug. Refer to the Guidance page for debugging tips.</p></blockquote><p><strong>DEBUG！！！</strong><br>打log的时候一定要规范化，不要自己写一大坨文字上字上去，连对齐都做不到，后续我们要面临的log数量是以数十万来计算的，为了保护眼睛，你也可以跟我一样为log加一些亮眼的颜表情，为漫长的debug之旅增添一点点乐趣</p><p>总之debug是非常折磨的，本人实现raft算法也是花了两三百小时，绝对有四五成的时间都枯坐在电脑前反复查看log，修改log的显示，剩下三四成时间是反复用瞪眼法查看自己写的代码，不断在脑海里和raft算法的各种规则进行校验。可以说对raft算法的理解有多深，很大程度上取决于debug的时间有多长</p><hr><p>那么开始正题吧</p><p>PartA需要我们实现leader选举机制，</p><p>简单地说leader要一直发送心跳包，保证follower能够在ElecltionTimeout前能至少收到一次心跳，并重置ElecltionTimeout。</p><p>如果因为网络问题，或者干脆是leader挂掉了，follower直到超时都没有收到心跳，那它可以合法认为leader真的挂了，follower就会转变为candidata开始选举流程，选举出新的leader后重复以上步骤。</p><p>说起来简单，里面的细节可是相当的多，不急，在下面详细介绍</p><p>PartA我们需要实现的点有</p><ol><li>完成server结构体，心跳包结构体的定义</li><li>leader心跳机制</li><li>选举机制</li></ol><h3 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a>结构体定义</h3><p>很多定义的东西我们还暂时用不上，但是提前按照论文说的定义好准没错</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Raft <span class="token keyword">struct</span> <span class="token punctuation">{</span>mu        sync<span class="token punctuation">.</span>Mutex          <span class="token comment">// Lock to protect shared access to this peer's state</span>peers     <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>labrpc<span class="token punctuation">.</span>ClientEnd <span class="token comment">// RPC end points of all peers</span>persister <span class="token operator">*</span>Persister          <span class="token comment">// Object to hold this peer's persisted state</span>me        <span class="token builtin">int</span>                 <span class="token comment">// this peer's index into peers[]</span>dead      <span class="token builtin">int32</span>               <span class="token comment">// set by Kill()</span><span class="token comment">// Your data here (3A, 3B, 3C).</span><span class="token comment">// Look at the paper's Figure 2 for a description of what</span><span class="token comment">// state a Raft server must maintain.</span><span class="token comment">//peer state</span>state <span class="token builtin">int32</span><span class="token comment">//persister 持久性</span>currentTerm      <span class="token builtin">int</span>votedFor         <span class="token builtin">int</span>log              <span class="token punctuation">[</span><span class="token punctuation">]</span>LogTypelastIncludeIndex <span class="token builtin">int</span>lastIncludeTerm  <span class="token builtin">int</span><span class="token comment">//volatility 易失性</span>commitIndex <span class="token builtin">int</span>lastApplied <span class="token builtin">int</span><span class="token comment">//leader volatility</span>nextIndex  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>matchIndex <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token comment">//AppendEntris info</span>lastHearBeatTime      time<span class="token punctuation">.</span>TimelastSendHeartbeatTime time<span class="token punctuation">.</span>Time<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>心跳包结构的定义</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> AppendEntriesArgs <span class="token keyword">struct</span> <span class="token punctuation">{</span>Term         <span class="token builtin">int</span> <span class="token comment">//leader任期</span>LeaderId     <span class="token builtin">int</span><span class="token comment">//leaderId</span><span class="token punctuation">}</span><span class="token keyword">type</span> AppendEntriesReply <span class="token keyword">struct</span> <span class="token punctuation">{</span>Term          <span class="token builtin">int</span>  <span class="token comment">//接收者任期</span>Success       <span class="token builtin">bool</span> <span class="token comment">//是否接受了心跳包的附带日志</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="选举机制"><a href="#选举机制" class="headerlink" title="选举机制"></a>选举机制</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> RequestVoteArgs <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token comment">// Your data here (3A, 3B).</span>Term         <span class="token builtin">int</span>CandidateId  <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">type</span> RequestVoteReply <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token comment">// Your data here (3A).</span>Term        <span class="token builtin">int</span>VoteGranted <span class="token builtin">bool</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在一个大循环中进行流程，每循环一次sleep 10ms</p><ol><li>检查状态，已经是leader了，continue下一次循环</li><li>检查超时时间timeCount := time.Since(rf.lastHearBeatTime).Milliseconds()<ol><li>没有超时，进入下一次循环</li><li>超时，继续往下走</li></ol></li><li>检查自己的状态，如果是follower，状态改为candidate，继续往下走</li><li>检查自己的状态，若果是candidate，更新计时器，自增任期，给自己投票，继续往下走</li><li>发送投票请求，阻塞统计投票结果<ol><li>还没统计完毕就超时了，解除阻塞，继续往下走</li><li>超时前拿到了结果，往下走</li></ol></li><li><strong>检查自己的状态还是不是candidate</strong>，如果不是了，continue进入下一次循环，如果还是candidate，继续往下走</li><li>查看投票结果，<ol><li>得到半数及以上投票（加上自己给自己头的一票就超半数了）则转变状态为leader，进入下一次循环</li><li>选举失败，不做操作，进入下一次循环</li></ol></li></ol><p>为什么需要在第6步检查自己是不是candidate？因为所有RPC的发送和响应都带有Term信息，接收方都需要对Term的值进行判断，如果投票RPC请求的响应的Term比自己大，需要将自己的状态转变为follower，更新自己的任期，清空voteFor。</p><p>如果状态转变为follower，其他所有流程（candidate选举流程，leader发送心跳）都要立刻中断，这就是使用大循环的好处，可以随时使用continue中断当前流程。如果使用各种函数嵌套实现流程，会导致消息传递很复杂，极其容易出错。</p><p>本人就因为这一点吃过苦</p><h3 id="心跳机制"><a href="#心跳机制" class="headerlink" title="心跳机制"></a>心跳机制</h3><p>leader当选后定时发送心跳包给其他follower或candidate</p><p>由于lab1只需要实现无日志的领导人选举，所以心跳包的参数只需要有Term和LeaderId就够了</p><p>主要思路是使用for大循环，检测自己是否为leader，是则进行心跳包发送判断</p><p>检查上次发送心跳包的时间距离当前时间的值，如果超过了规定的心跳包发送间隔就进行一次心跳包的发送</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>rf <span class="token operator">*</span>Raft<span class="token punctuation">)</span> <span class="token function">appendEntriesLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token operator">!</span>rf<span class="token punctuation">.</span><span class="token function">killed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>rf<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> rf<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> rf<span class="token punctuation">.</span>state <span class="token operator">!=</span> leader <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span>countTime <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>lastSendHeartbeatTime<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Milliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> countTime <span class="token operator">&lt;</span> HeartBeatInterval <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span>rf<span class="token punctuation">.</span>lastSendHeartbeatTime <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//发送心跳</span>rf<span class="token punctuation">.</span><span class="token function">SendAppendEntriesToAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从leader的角度来看，心跳包有这五种响应类型，注意这并不是需要写在心跳包的参数，只是为了debug方便被我定义出来的</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>AEresult_Accept      <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment">//接受日志</span>AEresult_Reject             <span class="token comment">//不接受日志</span>AEresult_StopSending        <span class="token comment">//我任期比你大！</span>AEresult_Ignore             <span class="token comment">//上个任期或更久前发送的心跳的响应</span>AEresult_Lost               <span class="token comment">//超时，对方没收到心跳包/己方没收到响应</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于lab1都是无日志的空心跳包，所以不会出现AEresult_Reject，但其它情况都有可能</p><p>leader收到的心跳包响应后需要立刻确认包返回参数中的Term，如果Term比自己的任期大，</p><ol><li>需要立刻停止剩余心跳的发送，将自己的状态更改为follower</li><li>更新自己的term</li><li><strong>不要</strong>重置定时器</li></ol><p>这里介绍一下如何实现ElectionTimeout定时器，思路很简单，对于follower和candidate，仍然是一个大循环不停检测当前时间和上次收到心跳的时间lastHearBeatTime的差值，如果距离上次收到心跳包的时间没超过设定的随机值，睡一小会（10ms）然后重复检测，如果超过了，就可以在循环里往下走流程（初次选举流程，选举超时流程，选举失败流程）</p><p>那么所谓的重置定时器就只是更新lastHearBeatTime为当前时间而已，这里有两个重置概念不要混淆：</p><ol><li>follower超时/candiata选举超时，超时到达后重置一个新的时间间隔，比如原本的ElectionTimeout时间长度为359ms，下一次就随机一个新的ElectionTimeout时间，比如524ms</li><li>follower/candidate收到一个合法（任期大于等于自己的任期）leader的心跳，重置<strong>lastHearbeatTime</strong>为收到leader心跳的时间，当然细读论文后，还有两个没有收到心跳却要重置定时器的时机，分别是：<ol><li>follower因为超时，成为candidate的时候， </li><li>follower收到选票请求并且<strong>投出赞同票</strong>时。</li></ol></li></ol><p>   只有这三种情况可以更新lastHearBeatTime，（当然话不能说太绝，后面加入快照机制的时候，follower收到快照后同样可以重置</p><p>今后本文所说的重置定时器均是指的第二种情况：更新lastHeartbeatTIme</p><p><strong>心跳包接收者的严格按顺序流程：</strong></p><ol><li>心跳包的任期比自己小，直接忽视，当然返回值还是要带上自己的任期，以便任期落后的leader更新自己的状态。中止流程，下面操作都不做，直接返回</li><li>心跳包的任期大于自己的任期，把自己的任期更新到心跳包的任期，清空votefor，如果自己的状态是candidate，退化为follower，继续往下走</li><li>心跳包的任期等于自己的任期，如果自己的状态是candidate，退化为follower，清空votefor，继续往下走</li><li>更新定时器，更新leaderId为心跳包的leaderid，返回success和自己的term</li></ol><p>无日志情况下的心跳机制就这些</p><p>实现好两这个流程，PartA基本就能通过了</p><p>初次实验可能会出现测试通过了，但测试却警告：“在没有网络崩溃的情况下发生了选举”</p><p>这说明一定有哪个流程没有被正确实现，比较常见的错误是收到心跳的时候没有正确更新定时器</p><hr><h2 id="Part-3B-log-hard"><a href="#Part-3B-log-hard" class="headerlink" title="Part 3B: log (hard)"></a>Part 3B: log (hard)</h2><p>在这一节开始关于锁的使用就需要重视了，不停使用大锁把每个函数锁起来确实可以很大一部分并发带来的问题，但是效率也是低下的，最好在考虑并发安全的同时尽可能缩小锁的范围。</p><p>照例看Hint</p><blockquote><p>You will need to implement the election restriction (section 5.4.1 in the paper).</p></blockquote><p><img src="/"></p><p>简单翻译，candidate的日志如果不比自己（follower）的日志新，那就拒绝投票</p><p>如何定义新？比较两者的最后一条日志的term，term更大的就是更新，如果term一样，比较最后一条日志的index，谁的index更大谁就新</p><p>所以follower比candidate新,follower就不会投赞成票，如果candidate更新，或者两者同样新，就可以赞同投票</p><p>为了实现比较term和index，增加vote结构体成员 LastLogIndex和LastLogTerm，如果一开始大家都没有日志，那就设置为某个默认值，我是设成-1</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> RequestVoteArgs <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token comment">// Your data here (3A, 3B).</span>Term         <span class="token builtin">int</span>CandidateId  <span class="token builtin">int</span>LastLogIndex <span class="token builtin">int</span>LastLogTerm  <span class="token builtin">int</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>follower处理投票的具体实现代码：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> rf<span class="token punctuation">.</span>votedFor <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> rf<span class="token punctuation">.</span>votedFor <span class="token operator">==</span> args<span class="token punctuation">.</span>CandidateId <span class="token punctuation">{</span>lastLogTerm <span class="token operator">:=</span> rf<span class="token punctuation">.</span><span class="token function">lastTerm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> args<span class="token punctuation">.</span>LastLogTerm <span class="token operator">&gt;</span> lastLogTerm <span class="token operator">||</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>LastLogTerm <span class="token operator">==</span> lastLogTerm <span class="token operator">&amp;&amp;</span> args<span class="token punctuation">.</span>LastLogIndex <span class="token operator">&gt;=</span> rf<span class="token punctuation">.</span><span class="token function">lastIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>rf<span class="token punctuation">.</span>votedFor <span class="token operator">=</span> args<span class="token punctuation">.</span>CandidateIdreply<span class="token punctuation">.</span>VoteGranted <span class="token operator">=</span> <span class="token boolean">true</span>rf<span class="token punctuation">.</span>lastHearBeatTime <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"🎫Rec Term[%d] [%d] -&gt; [%d]"</span><span class="token punctuation">,</span> rf<span class="token punctuation">.</span>currentTerm<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>me<span class="token punctuation">,</span> args<span class="token punctuation">.</span>CandidateId<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意细节</p><p>1：rf.votedFor == -1的判断，一个任期内，follower只能投一张赞成票，这保证了一个任期内只会合法产生一个leader。</p><p>2：rf.votedFor == args.CandidateId 这个判断是我在debug之旅做出的尝试，逻辑上并没有问题，follower发出的赞成票可能因为网络丢包导致candidate没收到这张票，那么follower再次收到同一个candidate的投票请求时，既然已经投给它了那么再投一次也无妨。但实际上candidate在一个任期内只会向一个服务器发送一次投票RPC，何来重复一说…但既然留着没问题，我也不删了</p><h3 id="日志复制"><a href="#日志复制" class="headerlink" title="日志复制"></a>日志复制</h3><p>修改心跳包相关代码</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> AppendEntriesArgs <span class="token keyword">struct</span> <span class="token punctuation">{</span>Term         <span class="token builtin">int</span> <span class="token comment">//leader任期</span>LeaderId     <span class="token builtin">int</span> <span class="token comment">//leaderId</span>PrevLogIndex <span class="token builtin">int</span>PrevLogTerm  <span class="token builtin">int</span>Entries      <span class="token punctuation">[</span><span class="token punctuation">]</span>LogTypeLeaderCommit <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">type</span> AppendEntriesReply <span class="token keyword">struct</span> <span class="token punctuation">{</span>Term          <span class="token builtin">int</span>  <span class="token comment">//接收者任期</span>Success       <span class="token builtin">bool</span> <span class="token comment">//是否接受心跳包</span>ConflictIndex <span class="token builtin">int</span>ConflictTerm  <span class="token builtin">int</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ConflictIndex ConflictTerm：这两个参数论文上没有，这是用于加快leader传输日志的回退速度所需要使用的参数，暂时按下不表</p><p>既然要实现日志复制，那首先得有日志。</p><p>测试框架通过Start()函数，为当前leader新增日志，</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>rf <span class="token operator">*</span>Raft<span class="token punctuation">)</span> <span class="token function">Start</span><span class="token punctuation">(</span>command <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>rf<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> rf<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>index <span class="token operator">:=</span> rf<span class="token punctuation">.</span><span class="token function">lastIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span>term <span class="token operator">:=</span> rf<span class="token punctuation">.</span>currentTermisLeader <span class="token operator">:=</span> rf<span class="token punctuation">.</span>state <span class="token operator">==</span> leader<span class="token comment">// Your code here (3B).</span><span class="token keyword">if</span> <span class="token operator">!</span>isLeader <span class="token punctuation">{</span><span class="token keyword">return</span> index<span class="token punctuation">,</span> term<span class="token punctuation">,</span> isLeader<span class="token punctuation">}</span><span class="token comment">//添加条目到本地</span>rf<span class="token punctuation">.</span>log <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>log<span class="token punctuation">,</span> LogType<span class="token punctuation">{</span>Term<span class="token punctuation">:</span>  rf<span class="token punctuation">.</span>currentTerm<span class="token punctuation">,</span>Value<span class="token punctuation">:</span> command<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span>rf<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"CLIENT📨 Term[%d] [%d] Receive [%v] logIndex[%d](leader action)\n"</span><span class="token punctuation">,</span> rf<span class="token punctuation">.</span>currentTerm<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>me<span class="token punctuation">,</span> command<span class="token punctuation">,</span> index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> index<span class="token punctuation">,</span> term<span class="token punctuation">,</span> isLeader<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果是非leader被调用了Start()，返回false即可，我向测试框架返回的index为rf.lastIndex() + 2，这是因为官方的认为第一条log的index为1，我这里并没有在log中实现哨兵位，所以第一条log的index是从0开始的，所以增加一条log之后index的值还得+1，才是测试程序希望得到的返回值。</p><p>追加完新日志条目后可以选择直接用一个协程来发送AppendEntries RPC同步日志，可以等leader下一次心跳周期到达，再自动发送。</p><blockquote><p>我一开始并没有太在意这个地方，没想到在lab4一个比较严格的测试中背刺到了，那个测试总共发送向leader发送1000日志，而且只有前一条日志被确认复制到了大多数服务器上之后，才发送下一条日志，最后统计出来100ms/op &gt; 33.3ms/op Fail Test</p></blockquote><p>leader有了新日志之后就可以开始日志复制流程了，日志复制的部分放在心跳包的发送流程中，这里用到了两个数组来确定leader需要发送哪些日志，</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">nextIndex  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>matchIndex <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>nextIndex数组</strong></p><p>nextIndex数组的意义非常明确，leader每次向id为i的follower发送的心跳包中，需要附加nextIndex[i]到最新日志条目的所有日志</p><p>每次leader当选后都要重置nextIndex数组，让其所有元素的值指向leader当前最新日志的下一位，也就是说指向了一个空位置</p><p>所以新leader当选后发送的第一条AE大多数情况下都是空日志</p><p>leader当选后还要重置matchIndex数组的值为0，当然还是因为我的log没有设置哨兵位，所以我设置成-1</p><p><strong>matchIndex数组</strong></p><p>matchIndex数组的意义是表示：leader确认过的，follower【i】与自己日志保持一致的最新Index，具体如何更新它的值后面会说明</p><p>matchIndex数组的作用只是为了给commitIndex的更新做参考</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> voteCount <span class="token operator">&gt;</span> <span class="token function">len</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>peers<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span> <span class="token punctuation">{</span>rf<span class="token punctuation">.</span>IisBack <span class="token operator">=</span> <span class="token boolean">false</span>rf<span class="token punctuation">.</span>state <span class="token operator">=</span> leaderrf<span class="token punctuation">.</span>leaderId <span class="token operator">=</span> rf<span class="token punctuation">.</span>merf<span class="token punctuation">.</span>nextIndex <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>peers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>peers<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>rf<span class="token punctuation">.</span>nextIndex<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rf<span class="token punctuation">.</span><span class="token function">lastIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span>rf<span class="token punctuation">.</span>matchIndex <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>peers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>peers<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>rf<span class="token punctuation">.</span>matchIndex<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token comment">//这条log与其他log相比打印在屏幕上会有很明显的错位效果，比较重要的log可以故意不遵守格式，方便第一眼找到，当然后面实验数十万条log，ide自己都不愿意打开的超大日志文件再怎么显眼都没卵用。只能是设置好关键词，善用搜索功能了</span><span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"❗ Term[%d] [%d] candidate -&gt; leader"</span><span class="token punctuation">,</span> rf<span class="token punctuation">.</span>currentTerm<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>me<span class="token punctuation">)</span>rf<span class="token punctuation">.</span>lastSendHeartbeatTime <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token operator">-</span>time<span class="token punctuation">.</span>Millisecond <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">*</span> HeartBeatInterval<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后leader就可以开始根据nextIndex的值发送日志了</p><h4 id="leader日志发送"><a href="#leader日志发送" class="headerlink" title="leader日志发送"></a>leader日志发送</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token operator">*</span>args <span class="token operator">=</span> AppendEntriesArgs<span class="token punctuation">{</span>Term<span class="token punctuation">:</span>         rf<span class="token punctuation">.</span>currentTerm<span class="token punctuation">,</span>LeaderId<span class="token punctuation">:</span>     rf<span class="token punctuation">.</span>me<span class="token punctuation">,</span>PrevLogIndex<span class="token punctuation">:</span> rf<span class="token punctuation">.</span>nextIndex<span class="token punctuation">[</span>server<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>PrevLogTerm<span class="token punctuation">:</span>  <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>Entries<span class="token punctuation">:</span>      <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>LogType<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>LeaderCommit<span class="token punctuation">:</span> rf<span class="token punctuation">.</span>commitIndex<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">if</span> rf<span class="token punctuation">.</span><span class="token function">index2LogPos</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>PrevLogIndex<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> rf<span class="token punctuation">.</span><span class="token function">index2LogPos</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>PrevLogIndex<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>log<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//有PrevIndex</span>args<span class="token punctuation">.</span>PrevLogTerm <span class="token operator">=</span> rf<span class="token punctuation">.</span>log<span class="token punctuation">[</span>rf<span class="token punctuation">.</span><span class="token function">index2LogPos</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>PrevLogIndex<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Term<span class="token punctuation">}</span><span class="token keyword">if</span> rf<span class="token punctuation">.</span><span class="token function">index2LogPos</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>nextIndex<span class="token punctuation">[</span>server<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> rf<span class="token punctuation">.</span><span class="token function">index2LogPos</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>nextIndex<span class="token punctuation">[</span>server<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>log<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//有nextIndex</span>args<span class="token punctuation">.</span>Entries <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>Entries<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>log<span class="token punctuation">[</span>rf<span class="token punctuation">.</span><span class="token function">index2LogPos</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>nextIndex<span class="token punctuation">[</span>server<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>leader将下标为nextIndex到最新下标的所有日志放到心跳包里发给对应的服务器</p><p>args中的PreLogIndex和PreLogTerm是leader要发给该serve的日志段的前一个日志条目，follower需要根据这两个参数的值判断自己的日志有没有跟leader匹配上，没匹配上的话是不能复制这份心跳里的日志的</p><p>leader发送完心跳RPC后处理回参的部分放在下文</p><p>LeaderCommit用来更新follower的commitIndex</p><p>回顾matchIndex的作用，</p><p>leader的commitIndex由matchIndex决定，</p><p>follower的commitInedx由leader心跳的LeaderCommit（commitIndex）决定，</p><p>matchIndex的值根据follower的心跳回参决定，如果follower匹配上了日志，那么leader就可以更新matchIndex的值为发送心跳时的最新日志条目的index</p><p>为什么要这么弯弯绕绕的更新commitIndex的值呢。这是保证日志在大多数服务器上保持一致的关键。</p><p>leader可以只在一次心跳周期内更新自己的commitIndex的值，这是因为leader拥有跟大多数follower通信的特权，它确实知道commitIndex在多数服务器上达成共识了所以leader可以更新。</p><p>其他服务器则至少需要经过<strong>两次心跳周期</strong>才能更新自己的commitIndex到leader水平，因为follower依赖于leader的判断。 </p><p>这有点类似于TCP三次握手，只有三次握手，才能使双方达成共识，少一次都无法确认。</p><p><strong>follower日志复制</strong></p><p>follower也不是收到日志就万事大吉的，需要经过额外判断确认能否接受日志</p><p>那就是判断PrevLogIndex和PrevLogTerm和自己的日志是否匹配上了</p><p>没匹配上就丢弃本次接收到的日志，回复leader额外信息指导leader下次该发送哪些日志。</p><p>匹配上了，就可以将心跳附加日志中自己没有的那一部分追加到自己log中</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> rf<span class="token punctuation">.</span><span class="token function">lastIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>PrevLogIndex <span class="token punctuation">{</span>reply<span class="token punctuation">.</span>ConflictIndex <span class="token operator">=</span> rf<span class="token punctuation">.</span><span class="token function">lastIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"💔Rec Term[%d] [%d] Reject:PreLogIndex[%d] Out of Len -&gt;[%d]"</span><span class="token punctuation">,</span> rf<span class="token punctuation">.</span>currentTerm<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>me<span class="token punctuation">,</span> args<span class="token punctuation">.</span>PrevLogIndex<span class="token punctuation">,</span> rf<span class="token punctuation">.</span><span class="token function">lastIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">if</span> args<span class="token punctuation">.</span>PrevLogIndex <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> rf<span class="token punctuation">.</span>log<span class="token punctuation">[</span>rf<span class="token punctuation">.</span><span class="token function">index2LogPos</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>PrevLogIndex<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Term <span class="token operator">!=</span> args<span class="token punctuation">.</span>PrevLogTerm <span class="token punctuation">{</span>reply<span class="token punctuation">.</span>ConflictTerm <span class="token operator">=</span> rf<span class="token punctuation">.</span>log<span class="token punctuation">[</span>rf<span class="token punctuation">.</span><span class="token function">index2LogPos</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>PrevLogIndex<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Term<span class="token keyword">for</span> index <span class="token operator">:=</span> rf<span class="token punctuation">.</span>lastIncludeIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> index <span class="token operator">&lt;=</span> args<span class="token punctuation">.</span>PrevLogIndex<span class="token punctuation">;</span> index<span class="token operator">++</span> <span class="token punctuation">{</span> <span class="token comment">// 找到冲突term的首次出现位置，最差就是PrevLogIndex</span><span class="token keyword">if</span> rf<span class="token punctuation">.</span>log<span class="token punctuation">[</span>rf<span class="token punctuation">.</span><span class="token function">index2LogPos</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>PrevLogIndex<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Term <span class="token operator">==</span> reply<span class="token punctuation">.</span>ConflictTerm <span class="token punctuation">{</span>reply<span class="token punctuation">.</span>ConflictIndex <span class="token operator">=</span> index<span class="token keyword">break</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"💔Rev Term[%d] [%d] Reject :PreLogTerm Not Match [%d] != [%d]"</span><span class="token punctuation">,</span> rf<span class="token punctuation">.</span>currentTerm<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>me<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>log<span class="token punctuation">[</span>rf<span class="token punctuation">.</span><span class="token function">index2LogPos</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>PrevLogIndex<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Term<span class="token punctuation">,</span> args<span class="token punctuation">.</span>PrevLogTerm<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>rf<span class="token punctuation">.</span><span class="token function">CopyEntries</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="follower日志复制"><a href="#follower日志复制" class="headerlink" title="follower日志复制"></a>follower日志复制</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>rf <span class="token operator">*</span>Raft<span class="token punctuation">)</span> <span class="token function">CopyEntries</span><span class="token punctuation">(</span>args <span class="token operator">*</span>AppendEntriesArgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>logchange <span class="token operator">:=</span> <span class="token boolean">false</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>Entries<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>rfIndex <span class="token operator">:=</span> i <span class="token operator">+</span> args<span class="token punctuation">.</span>PrevLogIndex <span class="token operator">+</span> <span class="token number">1</span>logPos <span class="token operator">:=</span> rf<span class="token punctuation">.</span><span class="token function">index2LogPos</span><span class="token punctuation">(</span>rfIndex<span class="token punctuation">)</span><span class="token keyword">if</span> rfIndex <span class="token operator">&gt;</span> rf<span class="token punctuation">.</span><span class="token function">lastIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//超出原本log长度了</span>rf<span class="token punctuation">.</span>log <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>log<span class="token punctuation">,</span> args<span class="token punctuation">.</span>Entries<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span>rf<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span><span class="token punctuation">)</span>logchange <span class="token operator">=</span> <span class="token boolean">true</span><span class="token keyword">break</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> rf<span class="token punctuation">.</span>log<span class="token punctuation">[</span>logPos<span class="token punctuation">]</span><span class="token punctuation">.</span>Term <span class="token operator">!=</span> args<span class="token punctuation">.</span>Entries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Term <span class="token punctuation">{</span> <span class="token comment">//有脏东西</span>rf<span class="token punctuation">.</span>log <span class="token operator">=</span> rf<span class="token punctuation">.</span>log<span class="token punctuation">[</span><span class="token punctuation">:</span>logPos<span class="token punctuation">]</span> <span class="token comment">//删除脏数据</span><span class="token comment">//一口气复制完</span>rf<span class="token punctuation">.</span>log <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>log<span class="token punctuation">,</span> args<span class="token punctuation">.</span>Entries<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span>rf<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span><span class="token punctuation">)</span>logchange <span class="token operator">=</span> <span class="token boolean">true</span><span class="token keyword">break</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//用于debug</span><span class="token keyword">if</span> logchange <span class="token punctuation">{</span><span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"💖Rev Term[%d] [%d] Copy: Len -&gt; [%d] "</span><span class="token punctuation">,</span> rf<span class="token punctuation">.</span>currentTerm<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>me<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"Term[%d] [%d] after copy:"</span><span class="token punctuation">,</span> rf<span class="token punctuation">.</span>currentTerm<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>me<span class="token punctuation">)</span>i <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>log<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">10</span><span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"Term[%d] [%d] index[%d] log[%v]"</span><span class="token punctuation">,</span> rf<span class="token punctuation">.</span>currentTerm<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>me<span class="token punctuation">,</span> i<span class="token operator">+</span>rf<span class="token punctuation">.</span>lastIncludeIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> rf<span class="token punctuation">.</span>log<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> min <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token keyword">if</span> args<span class="token punctuation">.</span>LeaderCommit <span class="token operator">&gt;</span> rf<span class="token punctuation">.</span><span class="token function">lastIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>min <span class="token operator">=</span> rf<span class="token punctuation">.</span><span class="token function">lastIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>min <span class="token operator">=</span> args<span class="token punctuation">.</span>LeaderCommit<span class="token punctuation">}</span><span class="token keyword">if</span> rf<span class="token punctuation">.</span>commitIndex <span class="token operator">&lt;</span> min <span class="token punctuation">{</span><span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"COMIT Term[%d] [%d] CommitIndex: [%d] -&gt; [%d]"</span><span class="token punctuation">,</span> rf<span class="token punctuation">.</span>currentTerm<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>me<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>commitIndex<span class="token punctuation">,</span> min<span class="token punctuation">)</span>rf<span class="token punctuation">.</span>commitIndex <span class="token operator">=</span> min<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里使用了ConflictIndex和ConflictTerm的快速回退优化。</p><p>论文并没有实现快速回退，论文对于心跳日志被拒绝的处理为：leader收到日志复制失败的响应后，将对应的nextIndex[i] -= 1即可，下一次心跳周期leader往回多发一个log（当然新的log也不会落下，一起发，只是还需要往前多发一个旧的日志），看看这次还不匹配的话，那就慢慢来着吧，一直回退到匹配为止。这就是日志回退现象：出现于leader和follower之间日志差异较大的时候，为了同步，leader需要多发一些日志</p><p>论文也说，这种操作看似效率低下，但发生情况很少，在现实中谁家的网络服务会差到丢包率30%，网络延迟达到2000ms，服务器反复宕机仰卧起坐，脑裂如同家常便饭呢，还要继续坚持提供可靠同步服务呢？但是在测试环境下，如果不日志快速回退的优化，极大概率会在某个Test挂掉</p><p>所以我们需要自己实现日志快速回退机制，好在实验官方指导中给了解决办法</p><blockquote><p>how to roll back quickly  the Figure 2 design backs up one entry per RPC – slow!  </p><p>lab tester may require faster roll-back  </p><p>paper outlines a scheme towards end of Section 5.3    no details; </p><p>here’s my guess; </p><p>better schemes are possible </p><table><thead><tr><th></th><th>Case 1</th><th>Case 2</th><th>Case 2</th></tr></thead><tbody><tr><td>S1</td><td>4 5 5</td><td>4 4 4</td><td>4</td></tr><tr><td>S2</td><td>4 6 6 6</td><td>4 6 6 6</td><td>4 6 6 6</td></tr></tbody></table><p>is leader for term 6, S1 comes back to life, S2 sends AE for last 6    AE has prevLogTerm=6  rejection from S1 includes:</p><p>XTerm:  term in the conflicting entry (if any)    </p><p>XIndex: index of first entry with that term (if any)    </p><p>XLen:   log length  </p><p>Case 1 (leader doesn’t have XTerm):    nextIndex = XIndex  </p><p>Case 2 (leader has XTerm):   nextIndex = leader’s last entry for XTerm  </p><p>Case 3 (follower’s log is too short):    nextIndex = XLen</p></blockquote><p>助教还提供了一个改进版，也就是我所使用的版本</p><blockquote><p>If a follower does not have prevLogIndex in its log, it should return with conflictIndex = len(log) and conflictTerm = None.</p><p>If a follower does have prevLogIndex in its log, but the term does not match, it should return conflictTerm = log[prevLogIndex].Term, and then search its log for the first index whose entry has term equal to conflictTerm.</p><p>Upon receiving a conflict response, the leader should first search its log for conflictTerm. If it finds an entry in its log with that term, it should set nextIndex to be the one beyond the index of the last entry in that term in its log.</p><p>If it does not find an entry with that term, it should set nextIndex = conflictIndex.</p></blockquote><h4 id="日志快速回退"><a href="#日志快速回退" class="headerlink" title="日志快速回退"></a>日志快速回退</h4><p>代码实现</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">ok <span class="token operator">:=</span> rf<span class="token punctuation">.</span>peers<span class="token punctuation">[</span>server<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token string">"Raft.AppendEntries"</span><span class="token punctuation">,</span> args<span class="token punctuation">,</span> reply<span class="token punctuation">)</span>rf<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> rf<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> ok <span class="token punctuation">{</span><span class="token keyword">if</span> args<span class="token punctuation">.</span>Term <span class="token operator">!=</span> rf<span class="token punctuation">.</span>currentTerm <span class="token punctuation">{</span><span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"💔Rec Term[%d] [%d] Receive Send.Term[%d][too OLD]"</span><span class="token punctuation">,</span> rf<span class="token punctuation">.</span>currentTerm<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>me<span class="token punctuation">,</span> args<span class="token punctuation">.</span>Term<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">if</span> rf<span class="token punctuation">.</span>currentTerm <span class="token operator">&lt;</span> reply<span class="token punctuation">.</span>Term <span class="token punctuation">{</span>rf<span class="token punctuation">.</span>votedFor <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>rf<span class="token punctuation">.</span>state <span class="token operator">=</span> followerrf<span class="token punctuation">.</span>currentTerm <span class="token operator">=</span> reply<span class="token punctuation">.</span>Termrf<span class="token punctuation">.</span>leaderId <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>rf<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"💔Rec Term[%d] [%d] Receive Discover newer Term[%d]"</span><span class="token punctuation">,</span> rf<span class="token punctuation">.</span>currentTerm<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>me<span class="token punctuation">,</span> reply<span class="token punctuation">.</span>Term<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">if</span> reply<span class="token punctuation">.</span>Success <span class="token punctuation">{</span>rf<span class="token punctuation">.</span>nextIndex<span class="token punctuation">[</span>server<span class="token punctuation">]</span> <span class="token operator">=</span> args<span class="token punctuation">.</span>PrevLogIndex <span class="token operator">+</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>Entries<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>rf<span class="token punctuation">.</span>matchIndex<span class="token punctuation">[</span>server<span class="token punctuation">]</span> <span class="token operator">=</span> rf<span class="token punctuation">.</span>nextIndex<span class="token punctuation">[</span>server<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment">//左闭右开，因此curLatestIndex指向的是最后一个发送的log的下一位可能为空</span><span class="token keyword">return</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">if</span> reply<span class="token punctuation">.</span>ConflictTerm <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span>searchIndex <span class="token operator">:=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token keyword">for</span> i <span class="token operator">:=</span> args<span class="token punctuation">.</span>PrevLogIndex<span class="token punctuation">;</span> i <span class="token operator">&gt;</span> rf<span class="token punctuation">.</span>lastIncludeIndex<span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">{</span><span class="token keyword">if</span> rf<span class="token punctuation">.</span>log<span class="token punctuation">[</span>rf<span class="token punctuation">.</span><span class="token function">index2LogPos</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Term <span class="token operator">==</span> reply<span class="token punctuation">.</span>ConflictTerm <span class="token punctuation">{</span>searchIndex <span class="token operator">=</span> i<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> searchIndex <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span>rf<span class="token punctuation">.</span>nextIndex<span class="token punctuation">[</span>server<span class="token punctuation">]</span> <span class="token operator">=</span> searchIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>rf<span class="token punctuation">.</span>nextIndex<span class="token punctuation">[</span>server<span class="token punctuation">]</span> <span class="token operator">=</span> reply<span class="token punctuation">.</span>ConflictIndex<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>rf<span class="token punctuation">.</span>nextIndex<span class="token punctuation">[</span>server<span class="token punctuation">]</span> <span class="token operator">=</span> reply<span class="token punctuation">.</span>ConflictIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="日志提交"><a href="#日志提交" class="headerlink" title="日志提交"></a>日志提交</h3><p>每一个服务器follower，candidat，leader都需要将LastApplied到commitIndex之间的日志通过applych提交给上层应用</p><blockquote><p>lastapplied和commitIndex不是易失性状态吗？</p></blockquote><p>是的，所以上层应用要具有接受raft层的重复日志的能力</p><blockquote><p>既然已经有了commitIndex，而且上层应用也能接受重复日志，为什么还需要有lastapplied？</p></blockquote><p>大概考虑到这几点吧</p><p>1：commitIndex是跳变的，如果不实现lastapplied，那么我们需要记录commitIndex变化之前的位置，然后向应用层发送这一段log，而且为了保证应用层能接收到所有日志发，需要在commitIndex再次变化之前，百分百完成之前这次发送log的流程，这在多线程环境下实现就很复杂了</p><p>2：lastApplied有个特点，它一次只增加1，在前一个log被应用层确定接受之前，不会提交下一条log。这就很大程度保障了应用层的数据安全</p><blockquote><p>需要留意的是任何操作applych的不能进行加锁操作，因为applyCh是个无缓冲channel，加锁几乎百分百导致死锁问题<br>但是如果不加锁又会出现一些小问题，这个问题主要在3D实验中体现，后面细说</p></blockquote><p>Apply函数，使用go单独开辟的协程</p><p>使用<strong>函数闭包+return+defer</strong>有奇效，主打的就是一个怀念goto关键字</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 修改rf.lastApplied</span><span class="token keyword">func</span> <span class="token punctuation">(</span>rf <span class="token operator">*</span>Raft<span class="token punctuation">)</span> <span class="token function">undateLastApplied</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> nomore <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">for</span> <span class="token operator">!</span>rf<span class="token punctuation">.</span><span class="token function">killed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> nomore <span class="token punctuation">{</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond <span class="token operator">*</span> time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// rf.snapshotXapplych.Lock()</span><span class="token comment">// defer rf.snapshotXapplych.Unlock()</span><span class="token comment">// DPrintf("APPLY Term[%d] [%d] Wait for the lock🔐", rf.currentTerm, rf.me)</span>rf<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// DPrintf("APPLY Term[%d] [%d] Hode the lock🔐", rf.currentTerm, rf.me)</span>nomore <span class="token operator">=</span> <span class="token boolean">true</span><span class="token keyword">if</span> rf<span class="token punctuation">.</span>lastApplied <span class="token operator">&lt;</span> rf<span class="token punctuation">.</span>commitIndex <span class="token punctuation">{</span>rf<span class="token punctuation">.</span>lastApplied <span class="token operator">+=</span> <span class="token number">1</span>index <span class="token operator">:=</span> rf<span class="token punctuation">.</span><span class="token function">index2LogPos</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>lastApplied<span class="token punctuation">)</span><span class="token keyword">if</span> index <span class="token operator">&lt;=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> index <span class="token operator">&gt;=</span> <span class="token function">len</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>log<span class="token punctuation">)</span> <span class="token punctuation">{</span>rf<span class="token punctuation">.</span>lastApplied <span class="token operator">=</span> rf<span class="token punctuation">.</span>lastIncludeIndex<span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"ERROR? 👿 [%d]Ready to apply index[%d] But index out of Len of log, lastApplied[%d] commitIndex[%d] lastIncludeIndex[%d] logLen:%d"</span><span class="token punctuation">,</span> rf<span class="token punctuation">.</span>me<span class="token punctuation">,</span> index<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>lastApplied<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>commitIndex<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>lastIncludeIndex<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">)</span>rf<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"APPLY Term[%d] [%d] -&gt; LOG [%d] value:[%d]"</span><span class="token punctuation">,</span> rf<span class="token punctuation">.</span>currentTerm<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>me<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>lastApplied<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>log<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>Value<span class="token punctuation">)</span>ApplyMsg <span class="token operator">:=</span> ApplyMsg<span class="token punctuation">{</span>CommandValid<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>Command<span class="token punctuation">:</span>      rf<span class="token punctuation">.</span>log<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>Value<span class="token punctuation">,</span>CommandIndex<span class="token punctuation">:</span> rf<span class="token punctuation">.</span>lastApplied <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"APPLY Term[%d] [%d] Unlock the lock🔐 For Start applyerCh &lt;- len[%d]"</span><span class="token punctuation">,</span> rf<span class="token punctuation">.</span>currentTerm<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>me<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>applyChTerm<span class="token punctuation">)</span><span class="token punctuation">)</span>rf<span class="token punctuation">.</span>applyChTerm <span class="token operator">&lt;-</span> ApplyMsg<span class="token keyword">if</span> rf<span class="token punctuation">.</span>IisBackIndex <span class="token operator">==</span> rf<span class="token punctuation">.</span>lastApplied <span class="token punctuation">{</span><span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"Term [%d] [%d] iisback = true iisbackIndex =[%d]"</span><span class="token punctuation">,</span> rf<span class="token punctuation">.</span>currentTerm<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>me<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>IisBackIndex<span class="token punctuation">)</span>rf<span class="token punctuation">.</span>IisBack <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token comment">// DPrintf("APPLY Term[%d] [%d] lock the lock🔐 For Finish applyerCh &lt;-", rf.currentTerm, rf.me)</span>nomore <span class="token operator">=</span> <span class="token boolean">false</span><span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"APPLY Term[%d] [%d] AppliedIndex [%d] CommitIndex [%d]"</span><span class="token punctuation">,</span> rf<span class="token punctuation">.</span>currentTerm<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>me<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>lastApplied<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>commitIndex<span class="token punctuation">)</span><span class="token punctuation">}</span>rf<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// DPrintf("APPLY Term[%d] [%d] Open the lock🔓", rf.currentTerm, rf.me)</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更新commitindex的函数，我这里还是单独开辟了一个协程独立进行，主要还是为了简化逻辑吧，其实放到leader的心跳发送周期里面更新也问题不大</p><blockquote><p>注意只有leader可以参考matchIndex的方式更新commitIndex</p><p>follower只能参考心跳中的LeaderCommitIndex更新自己的commitIndex</p></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>rf <span class="token operator">*</span>Raft<span class="token punctuation">)</span> <span class="token function">updateCommitIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//从matchIndex寻找一个大多数服务器认同的N</span><span class="token keyword">for</span> <span class="token operator">!</span>rf<span class="token punctuation">.</span><span class="token function">killed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Millisecond <span class="token operator">*</span> time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token boolean">_</span><span class="token punctuation">,</span> isleader <span class="token operator">:=</span> rf<span class="token punctuation">.</span><span class="token function">GetState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> isleader <span class="token punctuation">{</span>rf<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>matchIndex <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>matchIndex <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>matchIndex<span class="token punctuation">,</span> rf<span class="token punctuation">.</span><span class="token function">lastIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> rf<span class="token punctuation">.</span>peers <span class="token punctuation">{</span><span class="token keyword">if</span> i <span class="token operator">!=</span> rf<span class="token punctuation">.</span>me <span class="token punctuation">{</span>matchIndex <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>matchIndex<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>matchIndex<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>matchIndex<span class="token punctuation">)</span>lenMat <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>matchIndex<span class="token punctuation">)</span> N <span class="token operator">:=</span> matchIndex<span class="token punctuation">[</span>lenMat<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">if</span> N <span class="token operator">&gt;</span> rf<span class="token punctuation">.</span>commitIndex <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>N <span class="token operator">&lt;=</span> rf<span class="token punctuation">.</span>lastIncludeIndex <span class="token operator">||</span> rf<span class="token punctuation">.</span>currentTerm <span class="token operator">==</span> rf<span class="token punctuation">.</span>log<span class="token punctuation">[</span>rf<span class="token punctuation">.</span><span class="token function">index2LogPos</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Term<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// DPrintf("COMIT Term[%d] [%d] It's matchIndex = %v", rf.currentTerm, rf.me, matchIndex)</span><span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"COMIT Term[%d] [%d] commitIndex [%d] -&gt; [%d] (leader action)"</span><span class="token punctuation">,</span> rf<span class="token punctuation">.</span>currentTerm<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>me<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>commitIndex<span class="token punctuation">,</span> N<span class="token punctuation">)</span>rf<span class="token punctuation">.</span>IisBackIndex <span class="token operator">=</span> Nrf<span class="token punctuation">.</span>commitIndex <span class="token operator">=</span> N<span class="token punctuation">}</span>rf<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要密切关注的细节是：<br>if N &gt; rf.commitIndex &amp;&amp; (N &lt;= rf.lastIncludeIndex || <strong>rf.currentTerm == rf.log[rf.index2LogPos(N)].Term</strong>)</p><p>论文中有提到</p><p><img src="/2024/04/04/mit65840lab3shixian/12.png" alt="图片"></p><p>commitIndex将要被更新到的N这个值，其Term必须等于leader的currentTerm，否则就不能进行更新。</p><p>这是因为领导人不可以直接提交以前任期的日志，只有领导人自己发出去的日志被多数follower应用之后，他才可以将CommitIndex更新到这个任期跟自己匹配的新的index，否则会发生数据错乱问题。</p><p>这里贴上中文解释</p><p><img src="/2024/04/04/mit65840lab3shixian/14.png" alt="图片"></p><p>这是个比较隐秘的规则，很容易被忽略从而导致数据错乱</p><hr><h2 id="Part-3C-persistence-hard"><a href="#Part-3C-persistence-hard" class="headerlink" title="Part 3C: persistence (hard)"></a>Part 3C: persistence (hard)</h2><p>本次实验的代码量最少，阅读官方实验指导，它明确道在每一个持久化成员发生改变的时候调用persist（）函数进行持久化即可。</p><p>所谓持久化就是将数据读到硬盘，服务器崩溃后能从硬盘中读取到最近一次持久化的数据。</p><p>代码实现简单，但它确实是卡我（相信也是大多数人）最久的Part，原因无它，测试代码太变态了</p><p>而即使是如此变态的Test环境，仍然无法完全测出关于raft算法的bug，这也是多线程编程的一大特点，raft算法本身再完备，经程序员实现一手后又大不一样了</p><p>本次实验我所检查出的bug有这些：</p><p>follower投出赞成票后忘记更新定时器了</p><p>还有一个相对复杂的原因：一是RPC回复的速度太快，以至于原本期望的Leader并行同时发送多个心跳RPC，然后再不受干扰的一个一个处理返回的RPC这种情景可能不会出现，实际情况可能会出现Leader发送了第1个RPC，然后收到了回复，根据回复进行了处理，然后再继续发送剩余的心跳RPC</p><p>二是函数嵌套太多，导致最外层的函数很难根据内层函数的结果进行响应，比如内层函数本意是想要终止最外层函数的整个操作，于是它进行了return，但是只return了自己这一层，外层循环还在继续</p><p>假设leader的Term比接收者低，但是它刚从网络中隔离了所以不知道，继续发送带有旧Term的RPC，由于leader并行发送多个带有条目的RPC，但不是真的并行，所以发送前面的RPC中，leader如果在一个心跳RPC的响应中，发现接收者的任期比自己高，于是更新自己的任期，并转变为follower，但是此时心跳发送流程并没有立刻被停止，后面还在不停的发送RPC，并且由于已经更新到了新任期，后面这些RPC就真的被接收者采用了，从而导致数据错乱</p><p>本次实验需要较长时间进行debug，爱护眼睛，写好详细的log信息，祝各位debug愉快</p><h2 id="Part-3D-log-compaction-hard"><a href="#Part-3D-log-compaction-hard" class="headerlink" title="Part 3D: log compaction (hard)"></a>Part 3D: log compaction (hard)</h2><p>3D要求实现快照机制，由于不止leader可以进行快照，follower同样可以自行备份快照。</p><p>关于心跳机制中日志复制的部分，还有leader和follower交互这部分要进行大改。</p><p>建议每改动一处地方就马上再去测一遍ABC的测试，否则后续再debug不堪设想</p><h3 id="快照流程"><a href="#快照流程" class="headerlink" title="快照流程"></a>快照流程</h3><p>前面的实验中，leader通过applych将被应用的日志发送给应用层（上层，也就是我们lab4需要实现的kvRaft中的kvserver层）</p><p>上层实际上并没有一比一保存这些log，上层要做的是读取log中的操作信息，将其中的put，append等操作应用到数据库里，既然是数据库，肯定包含了很多对同一个键值对的操作，这些操作是可以压缩的</p><p>假设一个例子：</p><blockquote><p>上层数据库<strong>初始状态</strong> 【key：1，value：x 0 y】</p><p>上层数据库从raft层的applych按顺序收到一些操作数据库的log： log1【put，1，x 10 y】，log2【append，1，x 11 y】…. log42【<strong>put</strong>，1，x 100 y】，逐条应用，最后是一条put命令</p><p>上层数据库log42应用后的数据库最新状态【key：1，value：x 100 y】</p><p>上层数据库将当前数据库的状态复制一份，保存到硬盘里，这份备份就是<strong>数据库快照</strong>，之后无论重启多少次，都读取这份快照作为服务器重启后的数据库<strong>初始状态</strong></p><p>那么很显然，raft层就再也不需要向上层发送log42之前的快照，而且也不需要保存它们（除了某些必要的信息，比如lastInludeIndex,lastIncludeTerm）</p></blockquote><p>这就是快照机制,减少raft层在内存和硬盘中保存的log数量，加快重启后应用层(上层数据库)恢复数据库的速度</p><p>由上层调用的Snapshot（）函数：</p><h4 id="leader主动快照"><a href="#leader主动快照" class="headerlink" title="leader主动快照"></a>leader主动快照</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>rf <span class="token operator">*</span>Raft<span class="token punctuation">)</span> <span class="token function">Snapshot</span><span class="token punctuation">(</span>index <span class="token builtin">int</span><span class="token punctuation">,</span> snapshot <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// Your code here (3D).</span><span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"SNAPS Term[%d] [%d] 📷Snapshot ask to snap Index[%d] Raft log Len:[%d]"</span><span class="token punctuation">,</span> rf<span class="token punctuation">.</span>currentTerm<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>me<span class="token punctuation">,</span> index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">)</span>rf<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> rf<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>index <span class="token operator">-=</span> <span class="token number">1</span><span class="token keyword">if</span> index <span class="token operator">&lt;=</span> rf<span class="token punctuation">.</span>lastIncludeIndex <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span>compactLoglen <span class="token operator">:=</span> index <span class="token operator">-</span> rf<span class="token punctuation">.</span>lastIncludeIndex<span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"SNAPS Term[%d] [%d] After📷,lastIncludeIndex[%d]-&gt;[%d] lastIncludeTerm[%d]-&gt;[%d] len of Log-&gt;[%d]"</span><span class="token punctuation">,</span> rf<span class="token punctuation">.</span>currentTerm<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>me<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>lastIncludeIndex<span class="token punctuation">,</span> index<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>lastIncludeTerm<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>log<span class="token punctuation">[</span>rf<span class="token punctuation">.</span><span class="token function">index2LogPos</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Term<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token operator">-</span>compactLoglen<span class="token punctuation">)</span>rf<span class="token punctuation">.</span>lastIncludeTerm <span class="token operator">=</span> rf<span class="token punctuation">.</span>log<span class="token punctuation">[</span>rf<span class="token punctuation">.</span><span class="token function">index2LogPos</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Termrf<span class="token punctuation">.</span>lastIncludeIndex <span class="token operator">=</span> index<span class="token comment">//压缩日志</span>afterLog <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>LogType<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token operator">-</span>compactLoglen<span class="token punctuation">)</span><span class="token function">copy</span><span class="token punctuation">(</span>afterLog<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>log<span class="token punctuation">[</span>compactLoglen<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>rf<span class="token punctuation">.</span>log <span class="token operator">=</span> afterLog<span class="token comment">//把snapshot和raftstate持久化</span>rf<span class="token punctuation">.</span>SnapshotDate <span class="token operator">=</span> snapshotrf<span class="token punctuation">.</span>persister<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span><span class="token function">persistWithSnapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> snapshot<span class="token punctuation">)</span><span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"📷Cmi Term[%d] [%d] 📦Save snapshot to application[%d] (Receive from up Application)"</span><span class="token punctuation">,</span> rf<span class="token punctuation">.</span>currentTerm<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>me<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>persister<span class="token punctuation">.</span>snapshot<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2024新版lab最坑的一点来了，rf.persister.Save同时保存raftState和snapshot</p><p>在之前的实验中，实验指导给第二个参数赋值nil，但是在lab3D中，任何一处rf.persister.Save(rf.persistWithSnapshot(), nil)都会将已保存的snapshot数据<strong>完全删掉</strong>，很坑，非常坑</p><p>因为快照机制，leader会将index前的所有log删干净，那如果发生日志回退了，nextIndex一直回退到等于log42及之前怎么办呢</p><p>在这种情况，根据论文，我们需要leader主动将自己的快照发送过去，覆盖掉这个落后followr的快照，然后leader对于这个follower的matchIndex至少也是42了，后续再发生日志回退，也不可能回退到42，因为发送过快照的缘故两者之间的日志在42处一定是匹配的</p><h4 id="leader发送快照："><a href="#leader发送快照：" class="headerlink" title="leader发送快照："></a>leader发送快照：</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>rf <span class="token operator">*</span>Raft<span class="token punctuation">)</span> <span class="token function">sendInstallSnapshotToPeerId</span><span class="token punctuation">(</span>server <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// DPrintf("SNAPS Term[%d] [%d] goSend📷Wait for a lock🤨 to [%d],", rf.currentTerm, rf.me, server)</span>rf<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>args <span class="token operator">:=</span> <span class="token operator">&amp;</span>SnapshotInstallArgs<span class="token punctuation">{</span><span class="token punctuation">}</span>args<span class="token punctuation">.</span>Term <span class="token operator">=</span> rf<span class="token punctuation">.</span>currentTermargs<span class="token punctuation">.</span>LeaderId <span class="token operator">=</span> rf<span class="token punctuation">.</span>meargs<span class="token punctuation">.</span>LastIncludeIndex <span class="token operator">=</span> rf<span class="token punctuation">.</span>lastIncludeIndexargs<span class="token punctuation">.</span>LastIncludeTerm <span class="token operator">=</span> rf<span class="token punctuation">.</span>lastIncludeTermargs<span class="token punctuation">.</span>Data <span class="token operator">=</span> rf<span class="token punctuation">.</span>SnapshotDate<span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"SNAPS Term[%d] [%d] goSend📷 to [%d] args.LastIncludeIndex[%d],args.LastIncludeTerm[%d],len of snapshot[%d],"</span><span class="token punctuation">,</span> rf<span class="token punctuation">.</span>currentTerm<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>me<span class="token punctuation">,</span> server<span class="token punctuation">,</span> args<span class="token punctuation">.</span>LastIncludeIndex<span class="token punctuation">,</span> args<span class="token punctuation">.</span>LastIncludeTerm<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>Data<span class="token punctuation">)</span><span class="token punctuation">)</span>rf<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>args <span class="token operator">*</span>SnapshotInstallArgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>reply <span class="token operator">:=</span> <span class="token operator">&amp;</span>SnapshotInstallreplys<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">if</span> rf<span class="token punctuation">.</span><span class="token function">sendInstallSnapshot</span><span class="token punctuation">(</span>server<span class="token punctuation">,</span> args<span class="token punctuation">,</span> reply<span class="token punctuation">)</span> <span class="token punctuation">{</span>rf<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> rf<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> rf<span class="token punctuation">.</span>currentTerm <span class="token operator">!=</span> args<span class="token punctuation">.</span>Term <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">if</span> reply<span class="token punctuation">.</span>Term <span class="token operator">&gt;</span> rf<span class="token punctuation">.</span>currentTerm <span class="token punctuation">{</span>rf<span class="token punctuation">.</span>state <span class="token operator">=</span> followerrf<span class="token punctuation">.</span>leaderId <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>rf<span class="token punctuation">.</span>currentTerm <span class="token operator">=</span> reply<span class="token punctuation">.</span>Termrf<span class="token punctuation">.</span>votedFor <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>rf<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"SNAPS Term[%d] [%d] leader success to Send a 📷 to [%d] nextIndex for it [%d] -&gt; [%d] matchIndex [%d] -&gt; [%d]"</span><span class="token punctuation">,</span> rf<span class="token punctuation">.</span>currentTerm<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>me<span class="token punctuation">,</span> server<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>nextIndex<span class="token punctuation">[</span>server<span class="token punctuation">]</span><span class="token punctuation">,</span> rf<span class="token punctuation">.</span><span class="token function">lastIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> rf<span class="token punctuation">.</span>matchIndex<span class="token punctuation">[</span>server<span class="token punctuation">]</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span>LastIncludeIndex<span class="token punctuation">)</span>rf<span class="token punctuation">.</span>nextIndex<span class="token punctuation">[</span>server<span class="token punctuation">]</span> <span class="token operator">=</span> rf<span class="token punctuation">.</span><span class="token function">lastIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>rf<span class="token punctuation">.</span>matchIndex<span class="token punctuation">[</span>server<span class="token punctuation">]</span> <span class="token operator">=</span> args<span class="token punctuation">.</span>LastIncludeIndex<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="follower接受快照："><a href="#follower接受快照：" class="headerlink" title="follower接受快照："></a>follower接受快照：</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>rf <span class="token operator">*</span>Raft<span class="token punctuation">)</span> <span class="token function">InstallSnapshot</span><span class="token punctuation">(</span>args <span class="token operator">*</span>SnapshotInstallArgs<span class="token punctuation">,</span> reply <span class="token operator">*</span>SnapshotInstallreplys<span class="token punctuation">)</span> <span class="token punctuation">{</span>rf<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> rf<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"SNAPS Term[%d] [%d] Receiv📷 from[%d] lastIncludeIndex[%d] lastIncludeTerm[%d]"</span><span class="token punctuation">,</span> rf<span class="token punctuation">.</span>currentTerm<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>me<span class="token punctuation">,</span> args<span class="token punctuation">.</span>LeaderId<span class="token punctuation">,</span> args<span class="token punctuation">.</span>LastIncludeIndex<span class="token punctuation">,</span> args<span class="token punctuation">.</span>LastIncludeTerm<span class="token punctuation">)</span>reply<span class="token punctuation">.</span>Term <span class="token operator">=</span> rf<span class="token punctuation">.</span>currentTerm<span class="token keyword">if</span> args<span class="token punctuation">.</span>Term <span class="token operator">&lt;</span> rf<span class="token punctuation">.</span>currentTerm <span class="token punctuation">{</span><span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"SNAPS Term[%d] [%d] reject📷 for it's Term[%d] [too old]"</span><span class="token punctuation">,</span> rf<span class="token punctuation">.</span>currentTerm<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>me<span class="token punctuation">,</span> args<span class="token punctuation">.</span>Term<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">if</span> args<span class="token punctuation">.</span>Term <span class="token operator">&gt;</span> rf<span class="token punctuation">.</span>currentTerm <span class="token punctuation">{</span>rf<span class="token punctuation">.</span>currentTerm <span class="token operator">=</span> args<span class="token punctuation">.</span>Termrf<span class="token punctuation">.</span>state <span class="token operator">=</span> followerrf<span class="token punctuation">.</span>votedFor <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>rf<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>rf<span class="token punctuation">.</span>leaderId <span class="token operator">=</span> args<span class="token punctuation">.</span>LeaderIdrf<span class="token punctuation">.</span>lastHearBeatTime <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> args<span class="token punctuation">.</span>LastIncludeIndex <span class="token operator">&lt;=</span> rf<span class="token punctuation">.</span>lastIncludeIndex <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">if</span> args<span class="token punctuation">.</span>LastIncludeIndex <span class="token operator">&lt;</span> rf<span class="token punctuation">.</span><span class="token function">lastIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> rf<span class="token punctuation">.</span>log<span class="token punctuation">[</span>rf<span class="token punctuation">.</span><span class="token function">index2LogPos</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>LastIncludeIndex<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Term <span class="token operator">!=</span> args<span class="token punctuation">.</span>LastIncludeTerm <span class="token punctuation">{</span>rf<span class="token punctuation">.</span>log <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>LogType<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">// leftLog := make([]LogType, rf.lastIndex()-args.LastIncludeIndex)</span><span class="token comment">// copy(leftLog, rf.log[rf.index2LogPos(rf.lastIncludeIndex+1):])</span><span class="token comment">// rf.log = leftLog</span>rf<span class="token punctuation">.</span>log <span class="token operator">=</span> rf<span class="token punctuation">.</span>log<span class="token punctuation">[</span>rf<span class="token punctuation">.</span><span class="token function">index2LogPos</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>LastIncludeIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>rf<span class="token punctuation">.</span>log <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>LogType<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"SNAPS Term[%d] [%d] Accept📷 Now it's lastIncludeIndex [%d] -&gt; [%d] lastIncludeTerm [%d] -&gt; [%d]"</span><span class="token punctuation">,</span> rf<span class="token punctuation">.</span>currentTerm<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>me<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>lastIncludeIndex<span class="token punctuation">,</span> args<span class="token punctuation">.</span>LastIncludeIndex<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>lastIncludeTerm<span class="token punctuation">,</span> args<span class="token punctuation">.</span>LastIncludeTerm<span class="token punctuation">)</span><span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"snaps Term[%d] [%d] after snapshot log:"</span><span class="token punctuation">,</span> rf<span class="token punctuation">.</span>currentTerm<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>me<span class="token punctuation">)</span>rf<span class="token punctuation">.</span>lastIncludeIndex <span class="token operator">=</span> args<span class="token punctuation">.</span>LastIncludeIndexrf<span class="token punctuation">.</span>lastIncludeTerm <span class="token operator">=</span> args<span class="token punctuation">.</span>LastIncludeTermi <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>log<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">10</span><span class="token keyword">if</span> i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span><span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"Term[%d] [%d] index[%d] value[%v]"</span><span class="token punctuation">,</span> rf<span class="token punctuation">.</span>currentTerm<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>me<span class="token punctuation">,</span> i<span class="token operator">+</span>rf<span class="token punctuation">.</span>lastIncludeIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> rf<span class="token punctuation">.</span>log<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"📷Cmi Term[%d] [%d] 📦Save snapshot to application[%d] (Receive from leader)"</span><span class="token punctuation">,</span> rf<span class="token punctuation">.</span>currentTerm<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>me<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span>persister<span class="token punctuation">.</span>snapshot<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//snapshot提交给应用层</span>applyMsg <span class="token operator">:=</span> ApplyMsg<span class="token punctuation">{</span>SnapshotValid<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>Snapshot<span class="token punctuation">:</span>      args<span class="token punctuation">.</span>Data<span class="token punctuation">,</span>SnapshotIndex<span class="token punctuation">:</span> rf<span class="token punctuation">.</span>lastIncludeIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">//记得这里有个坑</span>SnapshotTerm<span class="token punctuation">:</span>  rf<span class="token punctuation">.</span>lastIncludeTerm<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment">//快照提交给了application</span>rf<span class="token punctuation">.</span>lastApplied <span class="token operator">=</span> rf<span class="token punctuation">.</span>lastIncludeIndex<span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"📷Cmi Term[%d] [%d] Ready to commit snapshot snapshotIndex[%d] snapshotTerm[%d]"</span><span class="token punctuation">,</span> rf<span class="token punctuation">.</span>currentTerm<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>me<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>lastIncludeIndex<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>lastIncludeTerm<span class="token punctuation">)</span>rf<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>rf<span class="token punctuation">.</span>applyChTerm <span class="token operator">&lt;-</span> applyMsgrf<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//持久化快照</span>rf<span class="token punctuation">.</span>SnapshotDate <span class="token operator">=</span> args<span class="token punctuation">.</span>Datarf<span class="token punctuation">.</span>persister<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span>rf<span class="token punctuation">.</span><span class="token function">persistWithSnapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span>Data<span class="token punctuation">)</span><span class="token function">DPrintf</span><span class="token punctuation">(</span><span class="token string">"📷Cmi Term[%d] [%d] Done Success to comit snapshot snapshotIndex[%d] snapshotTerm[%d]"</span><span class="token punctuation">,</span> rf<span class="token punctuation">.</span>currentTerm<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>me<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>lastIncludeIndex<span class="token punctuation">,</span> rf<span class="token punctuation">.</span>lastIncludeTerm<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于日志会因为快照被删除，所以log在logs数组中的位置发生了错误，具体来说：realPos = index - lastIncludeIndex - 1</p><p>这就是我实现Lab3 Raft的主要思路了，实际实现的时候还有很多其他细节需要考虑，留给读者自行体验了</p><p><img src="/2024/04/04/mit65840lab3shixian/8.png" alt="测试图"></p><p><img src="/15.png" alt="多次测试图"></p>]]></content>
      
      
      
        <tags>
            
            <tag> MIT6.5840 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIT6.5840 Lab2 实现</title>
      <link href="/2024/04/04/mit65840lab2shixian/"/>
      <url>/2024/04/04/mit65840lab2shixian/</url>
      
        <content type="html"><![CDATA[<h1 id="6-5840-Lab-2-Key-Value-Server"><a href="#6-5840-Lab-2-Key-Value-Server" class="headerlink" title="6.5840 Lab 2: Key/Value Server"></a>6.5840 Lab 2: Key/Value Server</h1><p>此节为新增实验，比Lab 1还简单不少。主要实现一个单服务器的KV键值对数据库，在网络情况变得复杂而不可靠的情况下，仍然为客户端提供线性一致的数据库查询/修改服务</p><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>Introduction<br>In this lab you will build a key/value server for a single machine that ensures that each operation is executed exactly once despite network failures and that the operations are linearizable. Later labs will replicate a server like this one to handle server crashes.</p><p>Clients can send three different RPCs to the key/value server: Put(key, value), Append(key, arg), and Get(key). The server maintains an in-memory map of key/value pairs. Keys and values are strings. Put(key, value) installs or replaces the value for a particular key in the map, Append(key, arg) appends arg to key’s value and returns the old value, and Get(key) fetches the current value for the key. A Get for a non-existent key should return an empty string. An Append to a non-existent key should act as if the existing value were a zero-length string. Each client talks to the server through a Clerk with Put/Append/Get methods. A Clerk manages RPC interactions with the server.</p></blockquote><p>大意就是客户端cleck会使用put，Append，和Get这三个RPC调用server服务器的kv数据库，我们需要保证在单服务器，多客户端，网络不可靠（丢包率巨高的网络环境）下<strong>零错误</strong>，<strong>线性</strong>地完成所有客户端调用请求</p><p>这个实验体验下来还是非常简单的，很快就能完成，lab2的kvserver主要是为了与Lab3的raft实现形成联动，最终在lab4实现多服务器的容错kv数据库</p><p>本节实验主要编写kvsrv文件夹下的client.go，server.go</p><h2 id="Key-value-server-with-no-network-failures-easy"><a href="#Key-value-server-with-no-network-failures-easy" class="headerlink" title="Key/value server with no network failures (easy)"></a><strong>Key/value server with no network failures (easy)</strong></h2><p>这个要求非常简单，既然是kvserver，直接在服务器端使用map[string]string 哈希表作为数据库的存储结构即可</p><p>受到lab1的启发，我在代码中额外实现了简单的基于哈希算法的<strong>缓存分片</strong>，通过哈希散列将数据分散到不同的哈希表中存储，减少单个哈希表的大小</p><p>Server使用maps []map[string]string作为存储结构，对每一个需要操作的key通过哈希算法散列后落到0-N范围内的某个固定值，然后对这个key的所有操作就可以都在maps[i]上进行了，客观上增加了一次哈希计算，但减少了在实际存储数据的哈希表中发生哈希碰撞的概率。</p><p><img src="/4.png" alt="缓存分片"></p><p>代码实现：</p><p><strong>哈希散列算法：</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">ihash</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token comment">// task number for each KeyValue emitted by Map.</span>h <span class="token operator">:=</span> fnv<span class="token punctuation">.</span><span class="token function">New32a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>h<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">int</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span><span class="token function">Sum32</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x7fffffff</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用方法：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>kv <span class="token operator">*</span>KVServer<span class="token punctuation">)</span> <span class="token function">ApplyGet</span><span class="token punctuation">(</span>Key <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span><span class="token keyword">return</span> kv<span class="token punctuation">.</span>maps<span class="token punctuation">[</span><span class="token function">ihash</span><span class="token punctuation">(</span><span class="token operator">*</span>Key<span class="token punctuation">)</span><span class="token operator">%</span>kv<span class="token punctuation">.</span>nMap<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">*</span>Key<span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>kv <span class="token operator">*</span>KVServer<span class="token punctuation">)</span> <span class="token function">ApplyPut</span><span class="token punctuation">(</span>Key <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">,</span> Value <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>index <span class="token operator">:=</span> <span class="token function">ihash</span><span class="token punctuation">(</span><span class="token operator">*</span>Key<span class="token punctuation">)</span> <span class="token operator">%</span> kv<span class="token punctuation">.</span>nMapkv<span class="token punctuation">.</span>maps<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">*</span>Key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span>Value<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>kv <span class="token operator">*</span>KVServer<span class="token punctuation">)</span> <span class="token function">ApplyAppend</span><span class="token punctuation">(</span>Key <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">,</span> Value <span class="token operator">*</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>index <span class="token operator">:=</span> <span class="token function">ihash</span><span class="token punctuation">(</span><span class="token operator">*</span>Key<span class="token punctuation">)</span> <span class="token operator">%</span> kv<span class="token punctuation">.</span>nMappreValue <span class="token operator">:=</span> kv<span class="token punctuation">.</span>maps<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">*</span>Key<span class="token punctuation">]</span>kv<span class="token punctuation">.</span>maps<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">*</span>Key<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token operator">*</span>Value<span class="token keyword">return</span> preValue<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类似的思想还有一致性哈希算法<br>一致性哈希算法将整个哈希值空间映射成一个按顺时针方向组织的虚拟圆环,使用哈希算法算出数据哈希值，然后根据哈希值的位置沿圆环顺时针查找，将数据分配到第一个遇到的集群节点进行缓存。</p><p>实现思路：<br>1.对不同节点服务器的某些参数(mac地址、IP地址等)进行hash计算，用hash值对2^32取模，确定当前服务器落在环某一个节点上<br>2.数据存储时，对指定的key进行hash计算，然后用hash值对2^32取模，确定数据落在环的哪一个节点上，得到环的节点值之后，顺时针方向找到遇到的第一台服务器，这台服务器就是存储当前数据的地方。</p><p><img src="/5.png" alt="一致性哈希算法"></p><p>一致性哈希算法有两大优点：<br>减少节点：服务器2发生故障，存在上面的数据都需要迁移，那么，此时只需要迁移服务器1与服务器2之间的数据B、C到服务器3即可。</p><p>增加节点：在数据B、C之间添加服务器4，那么只需要迁移存储在服务器2上的数据B到服务器4即可。</p><p>1）可扩展性。一致性哈希算法保证了增加或减少服务器时，数据存储的改变最少,相比传统哈希算法大大节省了数据移动的开销。</p><p>2） 更好地适应数据的快速增长。</p><p>不过本次实验只是单服务器的简单kvserver，并不需要一致性哈希的这些优点，只是作为知识点补充</p><h2 id="Key-value-server-with-dropped-messages-easy"><a href="#Key-value-server-with-dropped-messages-easy" class="headerlink" title="Key/value server with dropped messages (easy)"></a><strong>Key/value server with dropped messages (easy)</strong></h2><p>当加入了不稳定网络因素后，情况一下会变得复杂很多，不稳定网络会造成包的延迟，包的丢失。为了保证服务端能收到请求，客户端能得到响应，必须进行客户端的<strong>重复请求</strong>和服务端<strong>重复响应</strong>。</p><p><strong>客户端重复请求：</strong></p><p>客户端的重复请求很好解决，因为RPC调用本身是一定会有返回的，RPC返回值如果为false，说明请求发生了错误，例如超时未送达，超时未响应等。这个时候客户端立刻重发上一次请求即可，代码实现就是用一个while<del>（for）</del>循环一直不停尝试。</p><p><strong>服务端的应对：</strong></p><p>由于不稳定网络的因素，服务端可能多次收到同一个客户端的多次相同请求，重复的get请求还好处理，因为get请求是<strong>安全的</strong> <strong>幂等的</strong> </p><p>“安全”是指请求方法不会破坏服务器上的资源</p><p>“幂等”指的是多次执行相同的操作，结果都是相同的，即多次“幂”后结果“相等”</p><p>想对应的，put和append请求就是既不安全，也不幂等。大多数情况下在数据库里重复执行了本不该重复的put和append都会造成数据错乱。</p><p>因此一个显而易见的做法是给每一个来自客户端的请求加上唯一标识，服务器每次应用put和append操作前都要检查之前是否已经应用过相同的命令，若有，则可以跳过应用到数据库的过程，直接返回结果给客户端</p><p>但是为了解决重传问题，难道还需要在每次应用操作前搜索全部的历史操作检查重复吗？或者干脆再建立一个哈希集合专门存放历史操作的唯一标识？代价未免太大了。</p><p>好在有优化的方法：由于客户端只会重传上一个没得到结果的操作，而且在得到确认结果前绝不会继续请求新的操作，我们得以缩小服务端保存历史操作的范围</p><p>即服务器仅仅为每一个客户端保存它的上一次操作应返回的结果，如果同一个客户端的新的操作到来，说明旧的操作已经被客户端确认了，这就可以丢弃掉上一次操作，仅覆盖保存新的操作即可</p><p>具体实现如下</p><h3 id="client-go的代码实现"><a href="#client-go的代码实现" class="headerlink" title="client.go的代码实现"></a><strong>client.go的代码实现</strong></h3><p>为clerk 增加了两个成员，使用随机数作为身份标识的clientid，还有发送请求的序列号</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Clerk <span class="token keyword">struct</span> <span class="token punctuation">{</span>server       <span class="token operator">*</span>labrpc<span class="token punctuation">.</span>ClientEndclientId     <span class="token builtin">int64</span>latestOffset <span class="token builtin">int</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端生成时候，指定一个随机数作为身份标识，设置offset为0</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">MakeClerk</span><span class="token punctuation">(</span>server <span class="token operator">*</span>labrpc<span class="token punctuation">.</span>ClientEnd<span class="token punctuation">)</span> <span class="token operator">*</span>Clerk <span class="token punctuation">{</span>ck <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>Clerk<span class="token punctuation">)</span><span class="token operator">*</span>ck <span class="token operator">=</span> Clerk<span class="token punctuation">{</span>server<span class="token punctuation">:</span>       server<span class="token punctuation">,</span>clientId<span class="token punctuation">:</span>     <span class="token function">nrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>latestOffset<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">return</span> ck<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>随机数产生算法：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">nrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int64</span> <span class="token punctuation">{</span>max <span class="token operator">:=</span> big<span class="token punctuation">.</span><span class="token function">NewInt</span><span class="token punctuation">(</span><span class="token function">int64</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">62</span><span class="token punctuation">)</span>bigx<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span>Reader<span class="token punctuation">,</span> max<span class="token punctuation">)</span>x <span class="token operator">:=</span> bigx<span class="token punctuation">.</span><span class="token function">Int64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> x<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请求操作，失败后重复尝试即可，成功前就不会进行新的请求</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> <span class="token punctuation">{</span>ok <span class="token operator">:=</span> ck<span class="token punctuation">.</span>server<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token string">"KVServer."</span><span class="token operator">+</span>op<span class="token punctuation">,</span> <span class="token operator">&amp;</span>args<span class="token punctuation">,</span> <span class="token operator">&amp;</span>reply<span class="token punctuation">)</span><span class="token keyword">if</span> ok <span class="token punctuation">{</span><span class="token comment">//请求成功后自增序列号</span>ck<span class="token punctuation">.</span>latestOffset<span class="token operator">++</span><span class="token keyword">break</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="server端代码实现"><a href="#server端代码实现" class="headerlink" title="server端代码实现"></a><strong>server端代码实现</strong></h3><p>主要是实现处理重传的代码：</p><p>KVServer结构体：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> KVServer <span class="token keyword">struct</span> <span class="token punctuation">{</span>mu        sync<span class="token punctuation">.</span>MutexnMap      <span class="token builtin">int</span>maps      <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span>     <span class="token comment">//缓存分片</span>duplicate <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int64</span><span class="token punctuation">]</span>intStringPair <span class="token comment">//缓存客户端上一次操作</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>KVServer初始化：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>kv <span class="token operator">*</span>KVServer<span class="token punctuation">)</span> <span class="token function">InitServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>kv<span class="token punctuation">.</span>nMap <span class="token operator">=</span> <span class="token number">10</span>kv<span class="token punctuation">.</span>maps <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token keyword">range</span> kv<span class="token punctuation">.</span>maps <span class="token punctuation">{</span>kv<span class="token punctuation">.</span>maps<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">}</span>kv<span class="token punctuation">.</span>duplicate <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int64</span><span class="token punctuation">]</span>intStringPair<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要逻辑：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>kv <span class="token operator">*</span>KVServer<span class="token punctuation">)</span> <span class="token function">handler</span><span class="token punctuation">(</span>args <span class="token operator">*</span>ApplyArgs<span class="token punctuation">,</span> reply <span class="token operator">*</span>Reply<span class="token punctuation">)</span> <span class="token punctuation">{</span>kv<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> kv<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>dupli<span class="token punctuation">,</span> ok <span class="token operator">:=</span> kv<span class="token punctuation">.</span>duplicate<span class="token punctuation">[</span>args<span class="token punctuation">.</span>ClientId<span class="token punctuation">]</span><span class="token comment">//在map中登记新客户端，这步主要是为了简化逻辑</span><span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>dupli<span class="token punctuation">.</span>offset <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>dupli<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">}</span><span class="token keyword">if</span> args<span class="token punctuation">.</span>LatestOffset <span class="token operator">==</span> dupli<span class="token punctuation">.</span>offset <span class="token punctuation">{</span> <span class="token comment">//之前丢失的回复，于是直接回复dupli.value</span>reply<span class="token punctuation">.</span>Value <span class="token operator">=</span> dupli<span class="token punctuation">.</span>value<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">//确认dupli中的值已被client接收到,于是直接更新</span><span class="token keyword">switch</span> args<span class="token punctuation">.</span>OpT <span class="token punctuation">{</span><span class="token keyword">case</span> getT<span class="token punctuation">:</span>reply<span class="token punctuation">.</span>Value <span class="token operator">=</span> kv<span class="token punctuation">.</span><span class="token function">ApplyGet</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>args<span class="token punctuation">.</span>Key<span class="token punctuation">)</span><span class="token keyword">case</span> putT<span class="token punctuation">:</span>kv<span class="token punctuation">.</span><span class="token function">ApplyPut</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>args<span class="token punctuation">.</span>Key<span class="token punctuation">,</span> <span class="token operator">&amp;</span>args<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token keyword">case</span> appendT<span class="token punctuation">:</span>reply<span class="token punctuation">.</span>Value <span class="token operator">=</span> kv<span class="token punctuation">.</span><span class="token function">ApplyAppend</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>args<span class="token punctuation">.</span>Key<span class="token punctuation">,</span> <span class="token operator">&amp;</span>args<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//更新offset 更新reply.Value</span>kv<span class="token punctuation">.</span>duplicate<span class="token punctuation">[</span>args<span class="token punctuation">.</span>ClientId<span class="token punctuation">]</span> <span class="token operator">=</span> intStringPair<span class="token punctuation">{</span>offset<span class="token punctuation">:</span> args<span class="token punctuation">.</span>LatestOffset<span class="token punctuation">,</span> value<span class="token punctuation">:</span> reply<span class="token punctuation">.</span>Value<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是golang的map不是线程安全的，需要加锁保护，不过本身为了简化处理逻辑，我也直接给每个函数上了把大锁</p><p>实验结果：</p><p><img src="/2024/04/04/mit65840lab2shixian/6.png" alt="测试"></p>]]></content>
      
      
      
        <tags>
            
            <tag> MIT6.5840 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIT6.5840 Lab1 实现</title>
      <link href="/2024/04/03/mit65840lab1shixian/"/>
      <url>/2024/04/03/mit65840lab1shixian/</url>
      
        <content type="html"><![CDATA[<h1 id="What-is-6-5840-about"><a href="#What-is-6-5840-about" class="headerlink" title="What is 6.5840 about?"></a>What is 6.5840 about?</h1><p>MIT6.5840（原MIT6.824）是麻省理工的一门分布式系统课程，课堂上主要讲授分布式领域的论文，重点是它的实验部分，通过几个实验循序渐进，让学生最后能亲手完整实现基于Raft协议的分布式容错数据库。</p><p>往年只有四个实验，今年额外增加了一个，它们分别是:</p><p>实验一：实现（简单的）MapReduce分布式算法框架</p><p>实验二：实现单一服务器上的容错键值对数据库</p><p>实验三：实现Raft协议</p><p>实验四：基于Raft协议，实现具有容错功能、强一致性的分布式KVserver集群</p><p>实验五：实现分片数据库，在多个基于Raft协议的KVserver集群之间实现负载均衡，数据转移，配置更新等</p><span id="more"></span><h2 id="官方介绍"><a href="#官方介绍" class="headerlink" title="官方介绍"></a>官方介绍</h2><blockquote><p>6.5840 is a core 12-unit graduate subject with lectures, readings, programming labs, an optional project, a mid-term exam, and a final exam. It will present abstractions and implementation techniques for engineering distributed systems. Major topics include <strong>fault tolerance, replication, and consistency</strong>. Much of the class consists of studying and discussing case studies of <strong>distributed systems.</strong> </p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>整体实验的难度很高，但最后完成实验所需要的代码量却丝毫不多。</p><p>这很大程度得益于go简洁的语法，大概也只有go语言能让初学者在一天内完成语法级入门，并且立刻具有实现复杂实验的能力吧，可以说golang是一个非常神奇的语言。后续我大概会单独出一篇介绍在本实验需要留意的golang特性。</p><p>实验本身是一直在迭代的，每年变化都不大，比如优化一下测试用例之类的。但是今年春季学期的MIT6.5840确实有一些可以称道的变化了，原本四个实验现如今增加到了五个，主要在LAB2的位置增加了一个简易kvserver的实验，不过影响不大。</p><h2 id="Lab1-MapReduce"><a href="#Lab1-MapReduce" class="headerlink" title="Lab1: MapReduce"></a>Lab1: MapReduce</h2><p>Lab1具体要实现的算法过程称为MapReduce，一个分布式运算程序的编程框架，我们需要做的是填充mr文件夹下的coordinator.go, rpc.go, worker.go 这三个文件</p><p>具体思路直接看官方代码 mrsequential.go</p><p>首先映入眼帘的是loadPlugin函数，它的输入是os.Args[1]，返回值是两个函数</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">mapf<span class="token punctuation">,</span> reducef <span class="token operator">:=</span> <span class="token function">loadPlugin</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>os.Args[1]是我们在bash运行程序时指定的第二个参数</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go run mrsequential.go wc.so pg*.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是golang的Plugin系统，下面详细介绍一下。</p><p>观察指令，程序运行指定的第二个参数是 <strong>wc.so</strong> ，对于.so后缀的文件，熟悉编译过程的肯定能往动态链接库的方面去猜测。事实上它确实跟共享库有着很深的渊源，但用法却着实不那么方便</p><p>首先明确在C++中，主程序运行时除了需要提供.lib .a .dll .so等库的源文件外，还必须提供头文件。头文件标识库里面提供了可以供外界使用的接口</p><p>而且虽然动态链接库的链接发生在程序的执行过程，但是在编译环节，编译器仍然会<strong>执行链接检查</strong>,这个过程也是需要动态库的头文件参与进来的。虽然从文件的角度看，cpp的一个动态库就得由两个文件组成带来了些许麻烦，但它带来的帮助是巨大的</p><p>(1)代码编写时候：由于有头文件的帮助，编写主程序的时候可以很方便的通过阅读源码，IDE智能提示等方式获知函数的参数，返回值等等，不需要编译也能得到错误提示。而且使用方式跟自己写的函数没什么两样</p><p>(2)代码编译时：代码编译时可以由编译器提供正确性更强的检查，当然这是因为库的头文件也参与到了编译过程当中</p><p>但是CPP也提供了另外一种加载动态库的方式，<strong>动态加载</strong>方式：动态加载仍然是运行时加载，但可以在程序运行时由我们决定何时加载指定的模块。</p><p>具体函数如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 按指定的模式打开动态链接库文件，并返回句柄</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">dlopen</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>filename<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通过句柄获取共享对象或可执行文件中符号的地址</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">dlsym</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>handle<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>symbol<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 卸载打开的库</span><span class="token keyword">int</span> <span class="token function">dlclose</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果是动态加载动态库(dlopen(库名)/load(库名)等方法),则不需要头文件,只需要库文件.前提是调用方知道<strong>函数名和参数列表,返回值</strong>等信息,方可正确调用;</p><p>样例如下：<br>在libcaculator.so中定义了add函数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在main中动态调用libcaculator.so的过程：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//函数指针</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>CAC_FUNC<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打开动态链接库</span>handle <span class="token operator">=</span> <span class="token function">dlopen</span><span class="token punctuation">(</span><span class="token string">"./libcaculator.so"</span><span class="token punctuation">,</span> RTLD_LAZY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取一个函数</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>cac_func<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">dlsym</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> <span class="token string">"add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用函数</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"add: %d\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>cac_func<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭动态链接库</span><span class="token function">dlclose</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出：</span><span class="token comment">//add: 9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再看看golang中plugin的使用：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">p<span class="token punctuation">,</span> err <span class="token operator">:=</span> plugin<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>xmapf<span class="token punctuation">,</span> err <span class="token operator">:=</span> p<span class="token punctuation">.</span><span class="token function">Lookup</span><span class="token punctuation">(</span><span class="token string">"Map"</span><span class="token punctuation">)</span>mapf <span class="token operator">:=</span> xmapf<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>mr<span class="token punctuation">.</span>KeyValue<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用起来跟CPP动态库的动态加载方式是基本一致的，但是golang不支持主动关闭动态库，也就是说不支持热重载动态库功能，鉴于golang极致简洁的风格就原谅它了。</p><p>但是这种调用方式肯定不如CPP使用了头文件的方式，如果所有动态库都只能这样使用，对于程序编写者来说无疑是一种折磨。</p><p>回到实验本身<br>对于官方的第一个例子wc.go，它的功能是词频统计，由Map（）和Reduce（）实现</p><p>Map函数</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Map</span><span class="token punctuation">(</span>filename <span class="token builtin">string</span><span class="token punctuation">,</span> contents <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>mr<span class="token punctuation">.</span>KeyValue <span class="token punctuation">{</span><span class="token comment">// function to detect word separators.</span>ff <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>r <span class="token builtin">rune</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">!</span>unicode<span class="token punctuation">.</span><span class="token function">IsLetter</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token comment">// split contents into an array of words.</span>words <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">FieldsFunc</span><span class="token punctuation">(</span>contents<span class="token punctuation">,</span> ff<span class="token punctuation">)</span>kva <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>mr<span class="token punctuation">.</span>KeyValue<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> w <span class="token operator">:=</span> <span class="token keyword">range</span> words <span class="token punctuation">{</span>kv <span class="token operator">:=</span> mr<span class="token punctuation">.</span>KeyValue<span class="token punctuation">{</span>w<span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">}</span>kva <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>kva<span class="token punctuation">,</span> kv<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> kva<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Map函数输入一个长文本字符串，然后以任何非字母符号作为分隔符，将文本文件分割成单词，存储到切片中。</p><p>这些单词自然会有很多重复，但是这里不处理重复，为每一个单词加上“1”作为value就结束了。</p><p>肯定有人跟我当时阅读源码时有相同的疑惑，这里直接用map不就能完成字符串统计了吗，而且并不影响并行功能。没错，Map函数中确实可以提前对中间数据进行一些简单的shrink操作。只是这里没有这么做</p><p>MapReduce是一种分布式计算框架，我们主要学习的是只是这种思想，为后面实现Raft协议打下基础，不必纠结于此。</p><p>Reduce函数</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Reduce</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> values <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span><span class="token comment">// return the number of occurrences of this word.</span><span class="token keyword">return</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>输入[hello : [“1”,”1”,”1”,”1”]]，统计“1”的个数，结果转成字符串形式，也就是”4”；</p><h3 id="MapReduce流程"><a href="#MapReduce流程" class="headerlink" title="MapReduce流程"></a>MapReduce流程</h3><p><img src="/2024/04/03/mit65840lab1shixian/2.png" alt="使用json存储的键值对数据"></p><p>源数据需要经过分片分给不同机器上的Mapper进行计算，计算结果称为intermidiate。然后对intermidiate经过一轮汇总后再分片，交由reducer处理，最后再汇总reducer的输出，合并后形成最终结果。</p><p>因此每个worker（分布在不同主机上的程序）的任务都相当简单，从网络接收输入，执行各自的mapf或者reducerf，从网络输出结果。</p><p>MapReducer的核心在于任务的分配和接收，任务内部具体如何执行并非此实验重点。</p><p>在现实中，无论是Map任务和Reduce任务，都是在不同现实地址的主机上的worker进程中运行的，在实验中虽然没法实现不同主机，但仍然可以用网络技术RPC和多进程来进行模拟。</p><p>负责分配任务的进程称为coordinator，它负责产生和分派任务，是MapReduce算法框架的核心，因为每个worker的视野里只有自己的任务，对于整个计算目标却一无所知，coordinator就负责把握全局视野。（在以前实验中它的名字还是master，改名的原因可能跟github将默认分支从master改名至main是一致的）</p><p>一个很直观的MapReduce实现方法就是让coodinator主动通过网络通信，轮询worker进程</p><ol><li><p>worker是否处于无任务的空闲状态？如果空闲就通过一次RPC调用分配实际任务，否则就找下一个worker</p></li><li><p>worker如果并非空闲，那么是否已经完成了任务？如果完成任务就接受worker的输出，放到自己的存储空间里暂存</p></li><li><p>worker除了空闲状态和完成任务状态，还有一个失败状态</p><ol><li><p>worker失联：可能worker已经完成了任务，但是却因为网络中断无法提交任务，或者可能worker进程直接就是挂掉了，可能只是这次的轮询丢包了，coordinator再询问一次说不定就联系上了。</p></li><li><p>worker没有失联，但是它因为故障重启过了，它不知道自己重启前被分配过任务。好在coordinator是知道的，当成任务失败即可。</p></li></ol></li></ol><p>可以看到如果由coodinator来全权把握任务分配过程，实现起来是比较复杂的，coodinator要不停轮询来把握worker的状态。</p><p>但是这样效率也是相对较高的，分配方式很灵活，它可以根据机器的性能参数设置任务分配优先级实现最优分配，还可以根据任务的实时性/计算量来决定要让多少个worker并行以达到减少资源消耗的目的。不过这毕竟只是入门实验lab1，我们就不要奢求太多了。我们选择另一种方式实现任务调度</p><h3 id="worksteal"><a href="#worksteal" class="headerlink" title="worksteal"></a>worksteal</h3><p>我们借鉴work-steal的思想，让work自己从coordinator中取任务，这样可以自动实现负载均衡</p><p><a href="https://blog.csdn.net/blog_programb/article/details/134893638">工作窃取（Work-Stealing）是一种多线程和并行计算中的负载平衡策略，主要在Java的Fork/Join框架中得到应用_java workstealing-CSDN博客</a></p><p>worker的状态只有worker自己最清楚，因此采用worker主动联系coordinator取任务的方式实现起来会简单很多，coordinator接受到worker的任务请求后从自己的未完成任务里取一个交付给worker就完事了，接收到worker的任务完成后也看情况接受就行</p><p>具体实现思路就是worker周期性调用RPC请求任务，根据返回值判断任务有没有分配成功，成功就做，做完再调用RPC通知coordinator任务完成</p><h3 id="Coordinator代码实现"><a href="#Coordinator代码实现" class="headerlink" title="Coordinator代码实现"></a>Coordinator代码实现</h3><p>coordinator对于任务状态的三种标识:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span> <span class="token comment">//task 的状态标识</span>unassigned <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment">//task未分配</span>working           <span class="token comment">//task已分配，未确认是否完成</span>finish            <span class="token comment">//task已完成</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Coordinator的成员变量：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Coordinator <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token comment">// Your definitions here.</span>AllDone       <span class="token builtin">bool</span>       <span class="token comment">//标志：任务全部完成</span>AllMapDone    <span class="token builtin">bool</span>       <span class="token comment">//标志：Map任务全部完成</span>AllReduceDone <span class="token builtin">bool</span>       <span class="token comment">//标志：Reduce任务全部完成</span>Mu            sync<span class="token punctuation">.</span>Mutex <span class="token comment">//Coordinator共享资源访问锁</span>TaskMu        sync<span class="token punctuation">.</span>Mutex <span class="token comment">//task资源访问锁</span>TaskTotalNum  <span class="token builtin">int</span>        <span class="token comment">//总任务数</span>TaskLeft      <span class="token builtin">int</span>        <span class="token comment">//剩余未完成任务数</span>TaskTotal     <span class="token punctuation">[</span><span class="token punctuation">]</span>mrTask   <span class="token comment">//任务数组</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Task的成员变量：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> mrTask <span class="token keyword">struct</span> <span class="token punctuation">{</span>TaskType  <span class="token builtin">int</span>      <span class="token comment">//分辨是Map任务还是Reduce任务</span>TaskState <span class="token builtin">int</span>      <span class="token comment">//三种任务状态：未分配/已分配但未确认完成/确认完成</span>FileName  <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token comment">//任务参数</span>NReduce   <span class="token builtin">int</span>TaskId    <span class="token builtin">int</span>RecuderId <span class="token builtin">int</span>StartTime time<span class="token punctuation">.</span>Time <span class="token comment">//任务开始时间</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有了明确定义后就很简单了<br>实验不要求实现Mapreduce算法中的split部分，我们就根据输入的文件数量生成对应的Map任务即可</p><p>coordinator</p><ol><li><p>generateMapTask() 生成Map任务然后放到TaskTotal数组里</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Coordinator<span class="token punctuation">)</span> <span class="token function">generateMapTask</span><span class="token punctuation">(</span>file <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> NReduce <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> FileName <span class="token operator">:=</span> <span class="token keyword">range</span> file <span class="token punctuation">{</span>newTask <span class="token operator">:=</span> mrTask<span class="token punctuation">{</span>TaskType<span class="token punctuation">:</span>  mapTask<span class="token punctuation">,</span>TaskState<span class="token punctuation">:</span> unassigned<span class="token punctuation">,</span>NReduce<span class="token punctuation">:</span>   NReduce<span class="token punctuation">,</span>TaskId<span class="token punctuation">:</span>    index<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment">//使用append避免浅拷贝</span>newTask<span class="token punctuation">.</span>FileName <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>newTask<span class="token punctuation">.</span>FileName<span class="token punctuation">,</span> FileName<span class="token punctuation">)</span>c<span class="token punctuation">.</span>TaskTotal <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>TaskTotal<span class="token punctuation">,</span> newTask<span class="token punctuation">)</span><span class="token punctuation">}</span>c<span class="token punctuation">.</span>TaskTotalNum <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>TaskTotal<span class="token punctuation">)</span>c<span class="token punctuation">.</span>TaskLeft <span class="token operator">=</span> c<span class="token punctuation">.</span>TaskTotalNum<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>scheduler() 一开始调用generateMapTask()生成好map任务，等待map任务全部完成后再生成reduce任务</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Coordinator<span class="token punctuation">)</span> <span class="token function">Schedule</span><span class="token punctuation">(</span>files <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> NReduce <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">generateMapTask</span><span class="token punctuation">(</span>files<span class="token punctuation">,</span> NReduce<span class="token punctuation">)</span><span class="token keyword">go</span> c<span class="token punctuation">.</span><span class="token function">HandleCrashTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// fmt.Println("success: generateMapTask :", c.TaskTotal)</span>c<span class="token punctuation">.</span>AllDone <span class="token operator">=</span> <span class="token boolean">false</span>c<span class="token punctuation">.</span>AllMapDone <span class="token operator">=</span> <span class="token boolean">false</span>c<span class="token punctuation">.</span>AllReduceDone <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">for</span> <span class="token punctuation">{</span> <span class="token comment">//一秒检查一次可不可切换阶段</span><span class="token keyword">if</span> <span class="token operator">!</span>c<span class="token punctuation">.</span>AllMapDone <span class="token punctuation">{</span><span class="token keyword">if</span> c<span class="token punctuation">.</span><span class="token function">checkTaskDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span>AllMapDone <span class="token operator">=</span> <span class="token boolean">true</span>c<span class="token punctuation">.</span><span class="token function">generateReduceTask</span><span class="token punctuation">(</span>NReduce<span class="token punctuation">)</span><span class="token comment">// fmt.Println("AllMapDone")</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token operator">!</span>c<span class="token punctuation">.</span>AllReduceDone <span class="token punctuation">{</span><span class="token keyword">if</span> c<span class="token punctuation">.</span><span class="token function">checkTaskDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span>AllReduceDone <span class="token operator">=</span> <span class="token boolean">true</span>c<span class="token punctuation">.</span>AllDone <span class="token operator">=</span> <span class="token boolean">true</span><span class="token comment">// fmt.Println("AllMapDone")s</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> c<span class="token punctuation">.</span>AllDone <span class="token punctuation">{</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// fmt.Println("AllDone")</span><span class="token keyword">for</span> <span class="token punctuation">{</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>重点：AssignTasks()，这是coordinator的函数，但是不由coordinate自己调用，而是专用于worker远程调用，返回给worker的数据存放在reply结构体中。负责响应worker的任务请求。</p></li></ol><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> WorkerAskTask <span class="token keyword">struct</span> <span class="token punctuation">{</span> <span class="token comment">//此函数被调用本身说明了一切，不需要你来补充说明了</span><span class="token punctuation">}</span><span class="token keyword">type</span> WorkerAskTaskReply <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token comment">//将任务参数返回给worker，因为是实验环境，返回任务参数就够了</span><span class="token comment">//现实中的MapReduce当然还需要把任务完整数据都传给worker</span>Task mrTask<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Coordinator<span class="token punctuation">)</span> <span class="token function">AssignTasks</span><span class="token punctuation">(</span>args <span class="token operator">*</span>WorkerAskTask<span class="token punctuation">,</span> reply <span class="token operator">*</span>WorkerAskTaskReply<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span>Mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span>TaskMu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> c<span class="token punctuation">.</span>Mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> c<span class="token punctuation">.</span>TaskMu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// fmt.Println("Coordinator get a askTask from worker")</span><span class="token comment">// for _, task := range c.TaskTotal {</span><span class="token comment">// fmt.Printf(" %d", task.TaskState)</span><span class="token comment">// }</span><span class="token comment">// fmt.Println(" ")</span><span class="token keyword">if</span> c<span class="token punctuation">.</span>AllDone <span class="token punctuation">{</span>reply<span class="token punctuation">.</span>Task <span class="token operator">=</span> mrTask<span class="token punctuation">{</span>TaskType<span class="token punctuation">:</span> finishTask<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> c<span class="token punctuation">.</span>TaskLeft <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>reply<span class="token punctuation">.</span>Task <span class="token operator">=</span> mrTask<span class="token punctuation">{</span>TaskType<span class="token punctuation">:</span> waitForMonent<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">//遍历总任务表，找到一个未分配任务，将它分配出去，并设置task状态为工作中</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> c<span class="token punctuation">.</span>TaskTotal <span class="token punctuation">{</span><span class="token keyword">if</span> c<span class="token punctuation">.</span>TaskTotal<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>TaskState <span class="token operator">==</span> unassigned <span class="token punctuation">{</span><span class="token comment">// fmt.Println("Coordinator assign worker a task,taskId = ", c.TaskTotal[i].TaskId)</span>c<span class="token punctuation">.</span>TaskTotal<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>TaskState <span class="token operator">=</span> working<span class="token comment">//记录任务被分配出去的时间</span>c<span class="token punctuation">.</span>TaskTotal<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>StartTime <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// fmt.Println("now the task", c.TaskTotal[i].TaskId, "have been set ", c.TaskTotal[i].TaskState)</span>reply<span class="token punctuation">.</span>Task <span class="token operator">=</span> c<span class="token punctuation">.</span>TaskTotal<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token keyword">break</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>ComfirmTaskFinish() 同样是供给worker调用的函数，用于确认任务确实完成了</li></ol><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Coordinator<span class="token punctuation">)</span> <span class="token function">ComfirmTaskFinish</span><span class="token punctuation">(</span>args <span class="token operator">*</span>WorkerFinishTask<span class="token punctuation">,</span> reply <span class="token operator">*</span>WorkerFinTaskReply<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span>TaskMu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> c<span class="token punctuation">.</span>TaskMu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// fmt.Println("Coordinator comfirm a task has finished,taskId =", args.Task.TaskId)</span><span class="token keyword">var</span> TaskId <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token keyword">if</span> args<span class="token punctuation">.</span>Task<span class="token punctuation">.</span>TaskType <span class="token operator">==</span> mapTask <span class="token punctuation">{</span>TaskId <span class="token operator">=</span> args<span class="token punctuation">.</span>Task<span class="token punctuation">.</span>TaskId<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> args<span class="token punctuation">.</span>Task<span class="token punctuation">.</span>TaskType <span class="token operator">==</span> reduceTask <span class="token punctuation">{</span>TaskId <span class="token operator">=</span> args<span class="token punctuation">.</span>Task<span class="token punctuation">.</span>RecuderId<span class="token punctuation">}</span><span class="token comment">//既然worker已经返回了结果，说明任务当然是被分配过的woring状态</span><span class="token comment">//为什么还有这一行判断呢？这里跟后面的超时机制有关</span><span class="token keyword">if</span> c<span class="token punctuation">.</span>TaskTotal<span class="token punctuation">[</span>TaskId<span class="token punctuation">]</span><span class="token punctuation">.</span>TaskState <span class="token operator">==</span> working <span class="token punctuation">{</span>c<span class="token punctuation">.</span>TaskTotal<span class="token punctuation">[</span>TaskId<span class="token punctuation">]</span><span class="token punctuation">.</span>TaskState <span class="token operator">=</span> finishc<span class="token punctuation">.</span>TaskLeft<span class="token operator">--</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="worker代码实现"><a href="#worker代码实现" class="headerlink" title="worker代码实现"></a>worker代码实现</h3><p>worker的代码相对复杂一点，这个Worker函数就相当于main()函数，它的执行退出代表着整个MapReducer算法的结束，全部任务都被完成了，finishTask</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span> <span class="token comment">//worker 获得的任务标识</span>waitForMonent <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment">//等待标识</span>mapTask              <span class="token comment">//map任务标识</span>reduceTask           <span class="token comment">//reduce任务标识</span>finishTask           <span class="token comment">//算法结束标识</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么需要有waitForMonent标识？这是因为reducer任务需要在全部map任务完成后才能生成和被分配。所以可以预见到肯定会出现一两个map任务还在计算，而一堆空闲worker进程在不断请求任务的情景，使用此标识告诉worker，没任务并不代表着算法结束了，请等会再来请求一次</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// main/mrworker.go calls this function.</span><span class="token keyword">func</span> <span class="token function">Worker</span><span class="token punctuation">(</span>mapf <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>KeyValue<span class="token punctuation">,</span>reducef <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">{</span>curTask <span class="token operator">:=</span> <span class="token function">CallForATask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> curTask<span class="token punctuation">.</span>TaskType <span class="token operator">==</span> waitForMonent <span class="token punctuation">{</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> curTask<span class="token punctuation">.</span>TaskType <span class="token operator">==</span> mapTask <span class="token punctuation">{</span><span class="token function">ApplyMap</span><span class="token punctuation">(</span>mapf<span class="token punctuation">,</span> curTask<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> curTask<span class="token punctuation">.</span>TaskType <span class="token operator">==</span> reduceTask <span class="token punctuation">{</span><span class="token function">ApplyReduce</span><span class="token punctuation">(</span>reducef<span class="token punctuation">,</span> curTask<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> curTask<span class="token punctuation">.</span>TaskType <span class="token operator">==</span> finishTask <span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>既然coordinate只实现了任务分配，那么worker到底是如何完成MapReduce算法过程的呢？</p><ol><li>如果接受到的是Map任务，模仿mrsequential.go中的处理，打开任务filename指定的文件，读取文件内容并作为参数传递给mapf</li></ol><p>mrsequential.go:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">intermediate <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>mr<span class="token punctuation">.</span>KeyValue<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> filename <span class="token operator">:=</span> <span class="token keyword">range</span> os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"cannot open %v"</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">}</span>content<span class="token punctuation">,</span> err <span class="token operator">:=</span> io<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"cannot read %v"</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">}</span>file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>kva <span class="token operator">:=</span> <span class="token function">mapf</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span>intermediate <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>intermediate<span class="token punctuation">,</span> kva<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>那么worker的运算产生的中间文件intermediate该放到哪里呢？答案是直接写到硬盘里，先在本地暂存一会，每个文件都统计完之后，再通过网络传输文件给coordinator。当然传输过程并不是lab1的重点，我们直接让coordinator从硬盘里拿结果就是了，又不是真的在不同主机上。</li></ol><blockquote><p>A reasonable naming convention for intermediate files is mr-X-Y, where X is the Map task number, and Y is the reduce task number.<br>The worker’s map task code will need a way to store intermediate key/value pairs in files in a way that can be correctly read back during reduce tasks. One possibility is to use Go’s encoding/json package. To write key/value pairs in JSON format to an open file:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">enc <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">NewEncoder</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> kv <span class="token operator">:=</span> <span class="token operator">...</span> <span class="token punctuation">{</span>err <span class="token operator">:=</span> enc<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kv<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>and to read such a file back:</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token operator">&gt;</span>dec <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">NewDecoder</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token keyword">for</span> <span class="token punctuation">{</span> <span class="token keyword">var</span> kv KeyValue <span class="token keyword">if</span> err <span class="token operator">:=</span> dec<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kv<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>   <span class="token keyword">break</span> <span class="token punctuation">}</span> kva <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>kva<span class="token punctuation">,</span> kv<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h4 id="worker的ApplyMap-函数实现"><a href="#worker的ApplyMap-函数实现" class="headerlink" title="worker的ApplyMap()函数实现"></a>worker的ApplyMap()函数实现</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">ApplyMap</span><span class="token punctuation">(</span>mapf <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>KeyValue<span class="token punctuation">,</span> curTask mrTask<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//照抄mrsequential.go中的处理</span>intermidiates <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>KeyValue<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> fileName <span class="token operator">:=</span> <span class="token keyword">range</span> curTask<span class="token punctuation">.</span>FileName <span class="token punctuation">{</span>file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"fatel: Woker can't open file: "</span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">}</span>content<span class="token punctuation">,</span> err <span class="token operator">:=</span> io<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"fatel: Woker can't read all of file: "</span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//添加到中间文件</span>intermidiates <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>intermidiates<span class="token punctuation">,</span> <span class="token function">mapf</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//存储中间文件-------</span>numRecuce <span class="token operator">:=</span> curTask<span class="token punctuation">.</span>NReducemidKVfileName <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> numRecuce<span class="token punctuation">)</span>midFile <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>os<span class="token punctuation">.</span>File<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> midEnco <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>json<span class="token punctuation">.</span>Encoder<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numRecuce<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>midKVfileName<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"mr-"</span> <span class="token operator">+</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>curTask<span class="token punctuation">.</span>TaskId<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>mFile<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>midKVfileName<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>midFile <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>midFile<span class="token punctuation">,</span> mFile<span class="token punctuation">)</span>mEnco <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">NewEncoder</span><span class="token punctuation">(</span>mFile<span class="token punctuation">)</span>midEnco <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>midEnco<span class="token punctuation">,</span> mEnco<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//将intermediate 写入文件</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> kv <span class="token operator">:=</span> <span class="token keyword">range</span> intermidiates <span class="token punctuation">{</span>i <span class="token operator">:=</span> <span class="token function">ihash</span><span class="token punctuation">(</span>kv<span class="token punctuation">.</span>Key<span class="token punctuation">)</span> <span class="token operator">%</span> numRecucemidEnco<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span>kv<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//关闭打开的文件符</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> file <span class="token operator">:=</span> <span class="token keyword">range</span> midFile <span class="token punctuation">{</span>file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//报告任务完成</span><span class="token function">CallForFinishATast</span><span class="token punctuation">(</span>curTask<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MapTask结果如下</p><p><img src="/2024/04/03/mit65840lab1shixian/2.png" alt="图片"></p><p>每一个执行MapTask的worker最后都会输出NReduce个文件，也就是MapTask的输出【key,value】通过官方提供的哈希算法平均分配到N个文件中，这种方式的好处在于它所生成的N个文件的大小是相似的，后续的Reducer任务分配起来就很方便了</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// use ihash(key) % NReduce to choose the reduce</span><span class="token keyword">func</span> <span class="token function">ihash</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token comment">// task number for each KeyValue emitted by Map.</span>h <span class="token operator">:=</span> fnv<span class="token punctuation">.</span><span class="token function">New32a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>h<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">int</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span><span class="token function">Sum32</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x7fffffff</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="worker的ApplyReduce-函数实现"><a href="#worker的ApplyReduce-函数实现" class="headerlink" title="worker的ApplyReduce()函数实现"></a>worker的ApplyReduce()函数实现</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">ApplyReduce</span><span class="token punctuation">(</span>reducef <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token punctuation">,</span> curTask mrTask<span class="token punctuation">)</span> <span class="token punctuation">{</span>files <span class="token operator">:=</span> curTask<span class="token punctuation">.</span>FileName<span class="token comment">//将文件中的键值对按字典序排列</span>intermidiates <span class="token operator">:=</span> <span class="token function">shuffle</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token comment">//借鉴的写法，生成随机名字的temp文件以防止文件名重复</span>dir<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Getwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">CreateTemp</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">"mr-out-tempfile-"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"failed: os.CreateTemp failde"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>intermidiates<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token punctuation">{</span>j <span class="token operator">:=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token keyword">for</span> j <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> intermidiates<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>Key <span class="token operator">==</span> intermidiates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Key <span class="token punctuation">{</span>j<span class="token operator">++</span><span class="token punctuation">}</span><span class="token keyword">var</span> values <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token keyword">for</span> k <span class="token operator">:=</span> i<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> k<span class="token operator">++</span> <span class="token punctuation">{</span>values <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>values<span class="token punctuation">,</span> intermidiates<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//收集key相同的键值对，交给reducef处理</span>v <span class="token operator">:=</span> <span class="token function">reducef</span><span class="token punctuation">(</span>intermidiates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token comment">//fmt.Fprintf 写文件</span>fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">"%v %v\n"</span><span class="token punctuation">,</span> intermidiates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Key<span class="token punctuation">,</span> v<span class="token punctuation">)</span>i <span class="token operator">=</span> j<span class="token punctuation">}</span>file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>newFileName <span class="token operator">:=</span> <span class="token string">"mr-out-"</span> <span class="token operator">+</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>curTask<span class="token punctuation">.</span>RecuderId<span class="token punctuation">)</span>err <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">Rename</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dir<span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span>newFileName<span class="token punctuation">)</span><span class="token comment">// fmt.Println(file.Name())</span><span class="token comment">// fmt.Println(dir + "/" + newFileName)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"failed: os.Rename faile err ="</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//报告任务完成</span><span class="token function">CallForFinishATast</span><span class="token punctuation">(</span>curTask<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里有两个重要的细节</p><p>一个是<strong>shuffle函数</strong>的实现</p><p>另一个是<strong>随机文件名</strong>，完成Reducer任务后才将随机文件名重新命名</p><p><strong>随机文件名：</strong></p><blockquote><p>为什么一定要随机文件名？</p></blockquote><p>因为worker如果中途因为崩溃了，（阅读实验源码，是通过os.exit(1)实现的</p><p>worker是来不及正确关闭文件或者销毁文件的，会留下一个写入一半且没有被正确关闭的文件</p><p>那么交给下一个继承相同Reducer任务的worker处理不就好了？它如果发现相同id前辈已经写过一个mr-out-id的文件，那么就将前辈的文件删除，自己再创一个新的同名文件，这种情况下确实没问题。</p><p>但考虑到其他情况，这样的操作问题就大了，这跟我们后面实现的任务超时重新分配的机制有关</p><blockquote><p>如果一个任务执行的太久了也没有得到返回，coordinator会认为任务失败，回收任务并重新分配</p></blockquote><p>问题就在这里。任务只是超时了，worker却并不一定处于死亡状态(os.exit(1))，它可能真的只是因为做的太慢，但worker还健在，还在写文件呢！</p><p>然后就会发生两个worker对同一个文件同时写入的操作，或者后辈把前辈正在写的文件删除了，这是很严重的bug</p><p>接下来讲shuffle</p><h3 id="shuffle代码实现："><a href="#shuffle代码实现：" class="headerlink" title="shuffle代码实现："></a>shuffle代码实现：</h3><p>输入目标文件，使用decoder解码不断获得KeyValue类型的数据，全部读取到intermidiates里面然后用官方写好的sort接口按字典序排序就行</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">shuffle</span><span class="token punctuation">(</span>files <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>KeyValue <span class="token punctuation">{</span><span class="token keyword">var</span> intermidiates <span class="token punctuation">[</span><span class="token punctuation">]</span>KeyValue<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> fileName <span class="token operator">:=</span> <span class="token keyword">range</span> files <span class="token punctuation">{</span>file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"failed: shuffle open file "</span><span class="token punctuation">,</span> fileName<span class="token punctuation">,</span> <span class="token string">" failed, error ="</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span>Decode <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">NewDecoder</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">{</span><span class="token keyword">var</span> kv KeyValueerr <span class="token operator">=</span> Decode<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>kv<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">}</span>intermidiates <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>intermidiates<span class="token punctuation">,</span> kv<span class="token punctuation">)</span><span class="token punctuation">}</span>file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>sort<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span><span class="token function">ByKey</span><span class="token punctuation">(</span>intermidiates<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> intermidiates<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要代码就是这些，下面再讲讲超时重分配的细节</p><p>在coordinator.go中HandleCrashTask()是被go关键字挂起来的一个协程函数体</p><p>它用于寻找coordinator中超时未完成的任务，将它们的任务状态从working退化为unassigned，这样别的worker来申请任务的时候，coordinator就能继续分配它们了。</p><p>这也是在为什么在 ComfirmTaskFinish()函数中要求任务返回的时候要重新判断coordinator登记的任务状态还是不是working的原因</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Coordinator<span class="token punctuation">)</span> <span class="token function">HandleCrashTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">{</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>c<span class="token punctuation">.</span>TaskMu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> c<span class="token punctuation">.</span>AllDone <span class="token punctuation">{</span>c<span class="token punctuation">.</span>TaskMu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> c<span class="token punctuation">.</span>TaskTotal <span class="token punctuation">{</span><span class="token keyword">if</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>TaskTotal<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>StartTime<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">.</span>TaskTotal<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>TaskState <span class="token operator">==</span> working <span class="token punctuation">{</span><span class="token comment">// fmt.Println("task", c.TaskTotal[i].TaskId, "time out :", time.Since(c.TaskTotal[i].StartTime))</span>c<span class="token punctuation">.</span>TaskTotal<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>TaskState <span class="token operator">=</span> unassignedc<span class="token punctuation">.</span>TaskTotal<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>StartTime <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>c<span class="token punctuation">.</span>TaskMu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自此就能完全通过lab1的全部测试了！这次试验对于锁的使用非常简单，但是在后面实验就不是这样了</p><p><img src="/2024/04/03/mit65840lab1shixian/3.png" alt="测试"></p>]]></content>
      
      
      
        <tags>
            
            <tag> MIT6.5840 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人搭建博客教程-part2</title>
      <link href="/2024/03/16/gerendajianbokejiaochengpart2/"/>
      <url>/2024/03/16/gerendajianbokejiaochengpart2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>此Part仅做相关命令行操作的保存，方便没跟上的同学回来查找要用到的指令</p><span id="more"></span><h2 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h2><h3 id="文件夹命令"><a href="#文件夹命令" class="headerlink" title="文件夹命令"></a>文件夹命令</h3><p>进入文件夹</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> D:<span class="token punctuation">\</span>typora<span class="token punctuation">\</span>file<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回上一级</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>跳转到根目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token punctuation">\</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看当前路径下所有文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">dir</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建文件夹</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> myblog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新建非空文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> 文件中的内容<span class="token operator">&gt;</span>new.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看文件中的文本内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">type</span> 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除文件(如果是del 文件夹A是删除文件夹A内的所有带后缀的文件，若文件夹A中有文件夹B，文件夹B不会被修改)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">del 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除所有指定后缀的文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">del *.txtdel *.docx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>删除名为file的空文件夹</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rd <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除file文件夹下的所有文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rd <span class="token function">file</span> /s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成目录树</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tree<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>复制文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">copy 路径<span class="token punctuation">\</span>文件名 路径<span class="token punctuation">\</span>文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>移动文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">move 路径<span class="token punctuation">\</span>文件名 路径<span class="token punctuation">\</span>文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看本机ip地址</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ipconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ping测试网络连接</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ping</span> www.csdn.net<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h2><p>在终端直接输入即可<br>用户名和邮箱最好选择与github的用户名和邮箱 </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"用户名"</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输入该命令可以检查自己设置的所有config</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--list</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="生成ssh-key"><a href="#生成ssh-key" class="headerlink" title="生成ssh key"></a>生成ssh key</h3><p>SSH 为 Secure Shell 的缩写，SSH 为建立在应用层基础上的安全协议。SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。</p><p>SSH key 就是保证连接安全的密钥，由本机电脑生成。</p><p>把 <strong>.pub</strong> 后缀的公钥交付给网站，网站便能通过密钥保证身份识别</p><p><a href="https://www.cnblogs.com/gloria-5/p/12203044.html">ssh解释</a></p><p>检查是否存在SSH Key</p><p>第一行的作用是进入用户文件夹下的 **[.ssh]**文件夹<br>在我的电脑上，这个目录的完整表示就是 <strong>[C:\Users\Xiurt.ssh]</strong> 将其中的 <strong>[xiurt]</strong> 换成自己电脑的用户名，一样能直接进入此文件夹<br>为什么能简写成 【cd <del>/.ssh】呢，因为【</del>】符号就是C:\Users\Xiurt的缩写<br> 如图：</p><p><img src="/" alt="图片"></p><p> 第二行在【终端初识】中讲过，就是列出当前文件夹中的文件，也可以直接用window界面打开.ssh文件夹查看<br>如图：</p><p><img src="/2024/03/16/gerendajianbokejiaochengpart2/3.png" alt="图片"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/.ssh<span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果没有看到【id_rsa】和【id_rsa.pub 】这两个文件，就说明从来没生成过ssh key，所以可以执行以下命令生成ssh key（但其实可以通过此命令覆盖掉原本的ssh key）</p><p>【<a href="mailto:your_name@your_email.com">your_name@your_email.com</a>】这部分内容可以自行更改，这段格式只是一种习惯上的规范，它本质上就是一段注释，写什么都可以，当然中文除外</p><p>推荐写上注册github用的邮箱</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"your_name@your_email.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成密钥过程会阻塞三次，第一次是让你输入生成密钥的路径，我们选择默认，也就是直接拍回车键即可</p><p>第二，三次是让你输入使用密钥的密码，我们为了方便不要设置密码，直接拍回车键，再拍回车键即可</p><p>然后就会像我一样在.ssh文件夹下出现两个密钥文件</p><p><img src="/2024/03/16/gerendajianbokejiaochengpart2/4.png" alt="图"></p><p>然后我们需要将SSH的公钥内容copy到github上<br>公钥就是.pub后缀的那个，即id_rsa.pub文件，想要查看里面的密钥，两种方法：</p><p>方法一：直接在windows界面中打开.ssh文件夹，右键使用记事本打开</p><p><img src="/2024/03/16/gerendajianbokejiaochengpart2/5.png" alt="图"></p><p>打开后如图是一长串字符</p><p><img src="/2024/03/16/gerendajianbokejiaochengpart2/6.png" alt="图"></p><p>全部选中，复制</p><p>方法二：在命令行界面，首先确保自己在.ssh文件夹下</p><p><img src="/2024/03/16/gerendajianbokejiaochengpart2/7.png" alt="图"></p><p>然后使用type命令显示字符串</p><p><img src="/2024/03/16/gerendajianbokejiaochengpart2/8.png" alt="图"></p><p>一样全选复制</p><p>拿到.pub公钥后，打开github-&gt;setting-&gt;ssh-&gt;add ssh key<br>信息随意填写</p><p>然后测试密钥有没有添加成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>像下图出现hi 【用户名】的信息就算成功</p><p><img src="/2024/03/16/gerendajianbokejiaochengpart2/2.png" alt="图片"></p><hr><h2 id="SublimeText安装插件"><a href="#SublimeText安装插件" class="headerlink" title="SublimeText安装插件"></a>SublimeText安装插件</h2><ol><li><p>安装中文</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Install packagechinese<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>安装Markdown的预览功能，首先需要安装相关插件：</p></li></ol><p>Ctrl+Shift+p，输入Install Package回车<br>等待下一个输入框，输入MarkdomnPreview回车开始安装<br>弹出安装完成的文档，重启SublimeText</p><ol start="3"><li>SublimeText如何快速预览Markdown</li></ol><p>Ctrl+Shift+p，输入Markdown Preview: Preview in Browser回车<br>出现的选项中选择Markdown，即可跳转至默认浏览器以md格式查看</p><ol start="4"><li>自定义预览快捷键</li></ol><p>在Preferences -&gt; Key Bindings打开的文件右侧栏的中括号中添加如下代码，其中alt+q可以设置为任意按键；</p><p>注意要让下面这段代码位于[ ]里面</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span> <span class="token property">"keys"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"ctrl+q"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"markdown_preview"</span><span class="token punctuation">,</span> <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"browser"</span><span class="token punctuation">,</span> <span class="token property">"parser"</span><span class="token operator">:</span><span class="token string">"markdown"</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>SublimeText如何快速预览Markdown</p><p>Ctrl+Shift+p，输入Markdown Preview: Preview in Browser回车<br>出现的选项中选择Markdown，即可跳转至默认浏览器以md格式查看</p><hr><h2 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h2><p><strong>注意事项</strong> ，以下所有操作请在win+x键下的 <strong>【终端管理员界面】</strong> 中进行</p><ol><li>所有必备的应用程序安装完成后，可使用 npm 安装 Hexo。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后来到我们想要在电脑上放网站资源的地方，一定是要在一个空文件夹下进行</p><p>切换到D盘</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">d:<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新建一个空文件夹，名字自选</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> myblog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入到此空文件夹</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> myblog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行hexo初始化命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npx hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li><p>建站</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在本地测试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npx hexo cleannpx hexo gnpx hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><hr><h2 id="网站内容"><a href="#网站内容" class="headerlink" title="网站内容"></a>网站内容</h2><ol><li><p>主题</p></li><li><p>新建页面</p></li><li><p>认识markdown</p></li></ol><p><a href="https://blog.csdn.net/buzul/article/details/106347215">https://blog.csdn.net/buzul/article/details/106347215</a></p><ol start="4"><li>图片问题</li></ol><p>html</p><hr><h2 id="github部署"><a href="#github部署" class="headerlink" title="github部署"></a>github部署</h2><ol><li>建库：</li></ol><p>建立名为 &lt;你的 GitHub 用户名&gt;.github.io 的储存库</p><ol start="2"><li>生成token</li></ol><p><a href="https://www.nowcoder.com/discuss/353150292587913216">token</a></p><ol start="3"><li>设置hexo的_config.yaml</li></ol><p>A. 安装deploy</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>B. deploy项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/Oncelane/Oncelane.github.io.git <span class="token key atrule">branch</span> <span class="token punctuation">:</span> main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>C. url项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># URL</span><span class="token comment">## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'</span><span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//Oncelane.github.io<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npx hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果部署时发生如图错误</p><p><img src="/2024/03/16/gerendajianbokejiaochengpart2/9.png" alt="图片"></p><p>尝试取消git代理指令</p><p>取消代理:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> http.proxy<span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> https.proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客搭建教程</title>
      <link href="/2024/03/13/gerenbokedajianjiaocheng/"/>
      <url>/2024/03/13/gerenbokedajianjiaocheng/</url>
      
        <content type="html"><![CDATA[<h1 id="这篇教程的目的是提前帮助同学们进行Hexo建站所需的工具安装和注册GitHub账户等可能会花费较多时间的准备工作。"><a href="#这篇教程的目的是提前帮助同学们进行Hexo建站所需的工具安装和注册GitHub账户等可能会花费较多时间的准备工作。" class="headerlink" title="这篇教程的目的是提前帮助同学们进行Hexo建站所需的工具安装和注册GitHub账户等可能会花费较多时间的准备工作。"></a>这篇教程的目的是提前帮助同学们进行Hexo建站所需的工具安装和注册GitHub账户等可能会花费较多时间的准备工作。</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> 如果在操作过程中遇到任何问题，欢迎在哈工程IT协会群中直接询问，我会随时在线为大家解答。对于想要贯彻IT精神的人，也可以自行在百度上搜索解决方案😊。</p><span id="more"></span><hr><h2 id="访问github官网，注册账号"><a href="#访问github官网，注册账号" class="headerlink" title="访问github官网，注册账号"></a>访问github官网，注册账号</h2><p><strong>github官网：</strong><a href="https://github.com/">https://github.com/</a></p><p>如果遇到github登不上的情况，可以百度“github”+“如何访问”等关键词，或自备科学上网工具</p><hr><h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h2><p><strong>下载地址:</strong><br><a href="https://nodejs.org/dist/latest-v16.x/">Index of /dist/latest-v16.x/ (nodejs.org)</a></p><p>如图点击下载win平台X64版本的msi安装包</p><p><img src="/2024/03/13/gerenbokedajianjiaocheng/11.png" alt="图片"></p><p>直接运行下载得到的的msi安装包，安装路径建议统一为修改为D:/nodejs，其他安装选项不需要改动，一直next即可</p><p><img src="/2024/03/13/gerenbokedajianjiaocheng/3.png" alt="图片"></p><hr><h2 id="node-js环境变量设置"><a href="#node-js环境变量设置" class="headerlink" title="node.js环境变量设置"></a>node.js环境变量设置</h2><p><strong>1.<strong>在D:\nodejs文件夹下新建两个空文件夹，分别命名为 <strong>【node_global】</strong>，</strong>【node_cache】</strong></p><p><img src="/2024/03/13/gerenbokedajianjiaocheng/10.png" alt="图片"></p><p>**2.**使用win+R键打开“运行”窗口，输入cmd并回车打开命令行终端 <strong>（请记住这个操作，之后会经常打开这个界面）</strong>，分别复制以下两条命令并回车执行：</p><pre class="line-numbers language-none"><code class="language-none">npm config set prefix "D:\nodejs\node_global"npm config set cache "D:\nodejs\node_cache"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2024/03/13/gerenbokedajianjiaocheng/13.png" alt="图片"></p><p>**3.**设置淘宝镜像</p><pre class="line-numbers language-none"><code class="language-none">npm config set registry https://registry.npmmirror.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>**4.**检查是否成功配置</p><pre class="line-numbers language-none"><code class="language-none">npm config list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2024/03/13/gerenbokedajianjiaocheng/14.png" alt="图片"></p><p><strong>5.<strong>“我的电脑”-右键-“属性”-“高级系统设置”-“高级”-“环境变量”，点击</strong>【系统变量】</strong>下的<strong>【新建】</strong></p><p>变量名输入<strong>【NODE_PATH】</strong></p><p>变量值输入<strong>【D:\nodejs\node_global\node_modules】</strong></p><p><img src="/2024/03/13/gerenbokedajianjiaocheng/2.png" alt="图片"></p><p><strong>6.<strong>选中</strong>【系统变量】</strong>下的<strong>【Path】</strong>，点击<strong>【编辑】</strong> ，然后新建三个变量</p><pre class="line-numbers language-none"><code class="language-none">%NODE_PATH%%NODE_PATH%\node_cache%NODE_PATH%\node_global<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2024/03/13/gerenbokedajianjiaocheng/4.png" alt="图片"></p><p>最后确定即可，如若错误点击取消，请重新执行以上步骤</p><hr><h3 id="检查node-js是否安装成功"><a href="#检查node-js是否安装成功" class="headerlink" title="检查node.js是否安装成功"></a>检查node.js是否安装成功</h3><p>打开命令行终端，输入以下命令并回车执行：</p><pre class="line-numbers language-none"><code class="language-none">node -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2024/03/13/gerenbokedajianjiaocheng/5.png" alt="图片"></p><p>如图出现版本号就算成功安装，如果还是没有任何信息出现，可以百度”node.js“和”环境配置“关键词寻找解决办法</p><hr><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><p>官网直接下载setup安装包，运行安装</p><p><strong>git for win网址：</strong><br><a href="https://git-scm.com/download/win">Git - Downloading Package </a></p><p><img src="/2024/03/13/gerenbokedajianjiaocheng/7.png" alt="图片"></p><p>安装过程只需要改动如图的一个配置选项，其余默认</p><p><img src="/2024/03/13/gerenbokedajianjiaocheng/8.png" alt="图片"></p><p>安装完成后同样打开终端，输入：</p><pre class="line-numbers language-none"><code class="language-none">git -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>出现版本号信息即代表成功</p><p><img src="/2024/03/13/gerenbokedajianjiaocheng/6.png" alt="图片"></p><hr><h2 id="安装文本编辑工具"><a href="#安装文本编辑工具" class="headerlink" title="安装文本编辑工具"></a>安装文本编辑工具</h2><p><strong>选择1：</strong><br>visual studio code：</p><p><strong>vscode官网：</strong><br><a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p><p><strong>选择2：</strong><br>subliem：对于没有编程需求的同学可以安装此轻量级的文本编辑工具：</p><p><strong>subliem官网：</strong><br><a href="https://www.sublimetext.com/index2">https://www.sublimetext.com/index2</a></p><p><img src="/2024/03/13/gerenbokedajianjiaocheng/9.png" alt="图片"></p><hr><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>至此全部前置安装工作完成，后续还将有hexo配置，建站，github等部署工作我将会在3/12周日下午两点于腾讯会议演示教学，敬请期待</p><p>如果有动手能力强的同学想要先行尝试，可以前往hexo官网阅读官方文档，学习建站与部署</p><p><strong>hexo官方网址：</strong><br><a href="htps://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>短文-猫</title>
      <link href="/2024/02/15/meow/"/>
      <url>/2024/02/15/meow/</url>
      
        <content type="html"><![CDATA[<h1 id="猫"><a href="#猫" class="headerlink" title="猫"></a>猫</h1><span id="more"></span><p>黄昏是我一天中视力最差的时候，街上熙熙攘攘的人群我看不清面孔。当然，我并不期望在这座没有你的城市能如此轻易寻得你的身影。收回了看向街道的视线，一口饮尽手中的咖啡，我满心怅然地起身离开咖啡馆，开始了今日的徘徊。</p><p>无非是一次偶遇。放学后路过某处僻静小巷时，一声嘤咛稚嫩的猫叫吸引了我的注意。我向声音寻去，便看到了它。</p><p>橘黄的毛发，瞪着湿漉漉的眼睛，蹦跳着无比好奇地打量着周围的环境。轻轻招手它便向我走来，无疑是一只刚见世面的幼猫。</p><p>选择猫或许是因为我的懦弱，又或许是这种可爱的生物天生吸引着我，我不知道。只是当我的手轻轻划过它柔顺的毛皮时，它竟没有太多的反抗，这不像是一只野猫的反应。</p><p>然而我已经无法停止。听完了最后一声鸣呜，我捧起它似乎变得更轻的身体，向四周寻找它的安身所。</p><p>正是在这时，事情发生了。</p><p>你静静的站在我后面的一处阴影。看着你手中攥紧的猫绳，我立即明白了。我吞吞吐吐地开始向你解释……你却并不言语。对上你那双一如幼猫般湿漉漉的眼睛，我倍感麻烦。但终于你开口了，并非质问也非指责。我诧异于你口中吐露的话语，半响无法言语。你说希望今后我来做你的猫。</p><p>这只是一场玩闹的游戏吧……但当我在学校里远远地看到你的身影向我招手，我才逐渐开始感觉到头疼。假装没有发现你，我快步走回自己的班级。你并不罢休。很快你就站在显眼的教室门口，轻轻向我招手，我便只能向你走去。第一次时，你让我放学后留在班里等你过来。被问到要做什么，你也只是狡黠一笑并不回应。</p><p>放学后同学们渐渐离开教室，独剩我一人还坐在位子上。是了，任何平日里人流众多的场所一旦变得空旷无人，恐怖感自然而然浮现，但这又是为何呢。我的思绪在寂静中逐渐起舞。</p><p>灯忽然灭了，一双手猛地抚上我的脖颈。</p><p>“是你吗？”我无法转头，只好轻声发问，声音沉入黑寂中的教室。</p><p>带着你体温的手指开始摩挲我的皮肤，轻柔环绕着我的脖颈，在身体自然泛起粟栗之前，我竟先感到一阵宽慰。这可是对猫的爱抚？你的手指最终锁定了我的喉管，开始禁锢我的呼吸。这样悄无声息地接近我，到底谁才是猫呢。忽略脖子上逐渐加重力气的指尖，我的心神慢慢转移你手上肌肤的温润。在南方这样沉闷的时节，略微敏感的脖颈被你捂在手中，让我开始感到难耐的燥热。</p><p>并不需要挣扎，红外摄像头下你没有进行到最后的可能。只是像这样安静地接受你的惩罚，让我觉得自己像是面对神明忏悔的信徒，而且太过于虔诚了点吧。时间一点点流逝，我逐渐低下头，一如叩拜，一如敬仰。</p><p>终于松开了手，我失力地倒在课桌上，身体的本能让我大口喘息着。你也体会到扼住生命的快意了吗。扭头看向你，黑暗模糊了你的表情，唯有眼睛依旧带着湿漉漉的水色，在昏暗中映出一点难得的月光。</p><p>“要……要我送你回宿舍吗” 稍微歇息过后，我慢慢向你开口。你答应的十分干脆。我猜测你的心情很不错，我想，我也是。</p><p>你偶尔叫我陪你一起闲聊，或是在饭堂里一同进餐。开心时你会发出隐秘而清脆的笑声，被打趣时也会佯装嗔怒，在旁人的目光里我们的相处再正常不过。随着在一起的时间增长，我注意到你的朋友极少。毕竟你很奇怪，好吧，我也一样，这似乎又没什么可奇怪的。</p><p>平心而论，你实在是一个可爱的人，因此选择这样跟你相处或许已并非是我的良心忏悔。或许我只是被你湿润的眼睛所吸引，或许只是你需要一只猫，总而言之我再不想离开你。再进一步，如果能彻底窒息在你的双手里，我想，这才是我最大的愿望。我竟已如此成为一只猫了吗。哎呀，真是让我感到害羞。</p><p>我约好与你在校运会的凌晨翻出围墙，去往校后的山顶消磨时光。那天的我们毫无计划，尽管过高的围栏与偏离大道的山路使我们看起来过于狼狈了，但是当同学们喧哗吵闹的声音逐渐被抛到脑后，一处平整而充满绿意的草地出现在眼前时，你与我都知道这就是今天的目的地，两人的隐秘之所。</p><p>幻想把我推向了思绪的云端。在远离尘世的秘境中，我们同看日出、看月华、看苍茫的云海；我们同听鸟语、听虫鸣、听晚风的呼啸。我们如痴如醉，倒在了同一颗树下，又相视而笑，在万花丛中入眠。</p><p>但事情又在这时候发生了。</p><p>你的眼眸突然睁开，那双瞳孔或许是离我最近的星。被这样潮湿的眼睛盯住，谁不会失去气力呢？我松懈了，你也挣脱了捆住脖颈的手，挣脱了我。从此再不愿扭头看我一眼。</p><p>你与我决裂一场，持续到高考结束各走天涯也再无联系。如今飘荡在这陌生城市的肉体或许早已经缺失了灵魂。是那些日子的记忆太过鲜明，还是七年的时间太短，我仍沉溺于你的一切。本应轮到了你的回合，你怎能放弃，这对我太不公平。</p><p>拖曳着我本应交付与你的生命，我开始徘徊。这不为猫，不为自由，不为懦弱的快意。我想，我更需要窒息，需要你的注视，需要你手中的猫绳。</p><p>走出咖啡馆，入秋后泛黄的叶片开始占据路面。枝干上的叶子放弃了对生命最后的执念，重重坠下，又被秋风轻柔地吹起。其中一片叶沿着优美的轨迹飘摇而落，</p><p>正落在你的肩上。</p><hr><p>前年11月之前一次偶然的时机，我开始第一次创作这篇短文，感谢你提供的情绪来源，我也才能带着这般明显的怨气写出如此儿戏的文章</p><p>明眼人肯定能看出它融合了许多作品：从作家李敖的《红玫瑰》，到网文《寂寂》，再到电影《大象席地而坐》和戏剧《恋爱的犀牛》。它们对我留下了很深刻的印象，因此我不要脸地将它们统统揉进了同一篇文字中</p><p>在我看来，这些作品的共通之处是对日常生活的阴郁悲观的氛围渲染，但我在阅读或观看的过程中更多感受到的是宽慰，释然和解放，反而能够继续对生活进发了，原因为何我也不打算深入思考了。现如今也正是步入工作前做准备的最后时机，变得忙碌的日常不会让我有时间再回头慢慢修改这篇文，以及这篇文相关的人和事</p>]]></content>
      
      
      
        <tags>
            
            <tag> 纪实 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
